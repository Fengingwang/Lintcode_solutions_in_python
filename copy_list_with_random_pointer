# 使用hashtable，
# 在这个hash表里，记录了老链表和新链表的每一组对应。
# 这样先构造了一个纯next的链表，然后再次循环就能得到带random的链表了

"""
Definition for singly-linked list with a random pointer.
class RandomListNode:
    def __init__(self, x):
        self.label = x
        self.next = None
        self.random = None
"""
class Solution:
    # @param head: A RandomListNode
    # @return: A RandomListNode
    def copyRandomList(self, head):
        # write your code here
        nodeDict = dict()
        dummy = RandomListNode(0)
        pointer, newHead = head, dummy
        
        while pointer:
            newNode = RandomListNode(pointer.label)
            nodeDict[pointer] = newHead.next = newNode
            newHead, pointer = newHead.next, pointer.next
        pointer, newHead = head, dummy.next
        
        while pointer:
            if pointer.random:
                newHead.random = nodeDict[pointer.random]
            pointer, newHead = pointer.next, newHead.next
            
        return dummy.next
        
