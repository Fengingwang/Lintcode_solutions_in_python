# 链表的拷贝其实可以看做两个步骤，一个是节点数据的拷贝，另一个是节点关系的拷贝。
# 我们也可以先把所有的节点进行拷贝，并存入字典中。
# 然后遍历链表并拷贝两个指针。
# 因为任意指针可能指向空指针，所以在字典中添加一个空指针项。

"""
Definition for singly-linked list with a random pointer.
class RandomListNode:
    def __init__(self, x):
        self.label = x
        self.next = None
        self.random = None
"""


class Solution:
    # @param head: A RandomListNode
    # @return: A RandomListNode
    def copyRandomList(self, head):
        if head is None:
            return 
        
        # create a empty dict
        res = dict()
        
        # copy the node
        node = head
        while node:
            res[node] = RandomListNode(node.label)
            node = node.next

        # create a empty pointer
        res[None] = None

        # copy the next_pointer and random_pointer
        node = head
        while node:
            res[node].next = res[node.next]
            res[node].random = res[node.random]
            node = node.next
            
        return res[head]
