class Solution:
    """
    @param nums: A list of integers
    @return: A list of integers
    """
    def nextPermutation(self, nums):
        # write your code here
        if nums is None or len(nums) == 0:
            return 
        
        n = len(nums)
        firstsmall = -1
        for i in range(n - 2, - 1, -1):
            if nums[i] < nums[i + 1]:
                firstsmall = i
                break 
        
        if firstsmall == -1:
            nums.reverse()
            return nums
        
        firstlarge = -1
        for i in range(n - 1, 0 - 1, -1):
            if nums[i] > nums[firstsmall]:
                firstlarge = i
                break 
        
        nums[firstsmall], nums[firstlarge] =  nums[firstlarge], nums[firstsmall]
        nums[firstsmall + 1:] = reversed(nums[firstsmall + 1:])
        
        return nums

# 解题思路：输出字典序中的下一个排列。
# 比如123生成的全排列是：123，132，213，231，312，321。那么321的next permutation是123。
# 下面这种算法据说是STL中的经典算法。
# 在当前序列中，从尾端往前寻找两个相邻升序元素，升序元素对中的前一个标记为partition。
# 然后再从尾端寻找另一个大于partition的元素，并与partition指向的元素交换，
# 然后将partition后的元素（不包括partition指向的元素）逆序排列。
# 比如14532，那么升序对为45，partition指向4，由于partition之后除了5没有比4大的数，所以45交换为54，即15432，
# 然后将partition之后的元素逆序排列，即432排列为234，则最后输出的next permutation为15234。
        
    
