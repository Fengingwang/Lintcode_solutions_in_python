# 解题思路：
# pal[i][j]表示从字符i到j是否为一个回文字符串。
# f[i] 表示前i个字母，最少可以被分割为多少个回文串 -1, that is mincut ~ f

定义函数
D[i,n] = 区间[i,n]之间最小的cut数，n为字符串长度

 a   b   a   b   b   b   a   b   b   a   b   a
                     i                       n
如果现在求[i,n]之间的最优解？应该是多少？简单看一看，至少有下面一个解


 a   b   a   b   b   b   a   b   b   a   b   a
                 i               j   j+1     n

此时  D[i,n] = min(D[i, j] + D[j+1,n])  i<=j <n
这是个二维的函数，实际写代码时维护比较麻烦。所以要转换成一维DP
如果每次，从i往右扫描，每找到一个回文就算一次DP的话，就可以转换为
D[i] = 区间[i,n]之间最小的cut数，n为字符串长度， 则,
D[i] = min(1+D[j+1] )    i<=j <n
有个转移函数之后，一个问题出现了，就是如何判断[i,j]是否是回文？每次都从i到j比较一遍？太浪费了，这里也是一个DP问题。
定义函数
P[i][j] = true if [i,j]为回文
那么
P[i][j] = str[i] == str[j] && P[i+1][j-1]

class Solution:
    """
    @param s: A string
    @return: An integer
    """
    def minCut(self, s):
        # write your code here
        if len(s) == 0:
            return 
        n = len(s)
        
        pal = [[False for x in range(n)]  for y in range(n)]
        f = [n - i for i in range(n + 1)]
        
        for i in range(n - 1, 0 - 1, -1):
            for j in range(n - 1, i - 1, -1):
                if s[i] == s[j] and (j - i <= 1 or pal[i + 1][j - 1] == True):
                    pal[i][j] = True
                    f[i] = min(f[i], f[j + 1] + 1)
        
        return f[0] - 1
