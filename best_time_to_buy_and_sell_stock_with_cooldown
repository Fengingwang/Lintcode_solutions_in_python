# buy[i]: Max profit till index i. The series of transaction is ending with a buy.
# sell[i]: Max profit till index i. The series of transaction is ending with a sell.
# buy[i]: To make a decision whether to buy at i, 
# we either take a rest, by just using the old decision at i - 1, 
# or sell at/before i - 2, then buy at i, We cannot sell at i - 1, then buy at i, because of cooldown.
# sell[i]: To make a decision whether to sell at i, 
# we either take a rest, by just using the old decision at i - 1, 
# or buy at/before i - 1, then sell at i.

# buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);   
# sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);

class Solution:
    """
    @param prices: a list of integers
    @return: return a integer
    """
    def maxProfit(self, prices):
        # write your code here
        if prices is None or len(prices) == 0:
            return 0
        
        n = len(prices)
        sell, buy = [0] * n, [0] *n
        buy[0] = -prices[0]
        
        for i in range(1, n):
            buy[i] = max(buy[i - 1], sell[i - 2] - prices[i])
            sell[i] = max(sell[i - 1], buy[i - 1] + prices[i])
        
        return max(sell[n - 1], buy[n - 1])
