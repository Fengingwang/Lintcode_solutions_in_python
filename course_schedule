思路：很明显的问题可以转化为求拓扑排序（Topological Sort）。
拓扑排序的做法如下：
每次找入度为0的点，输出该入度为0的点，并删除与之相连接的边
重复1直到没有入度为0的点。之前输出入度为0的点若小于原图的结点数，那么说明图有环，即拓扑排序不存在，否则即为拓扑排序。
class Solution:
    def canFinish(self, n, prerequisites):
        # write your code here
        
        G = [[] for _ in range(n)]
        degree = [0] * n
        
        for i, j in prerequisites:
            G[j].append(i)  
            # G[i].append(j) is not right here i is from 1 to n so we just try to scan i
            degree[i] += 1
        
        dfs = [i for i in range(n) if degree[i] == 0]
        for i in dfs: 
            for j in G[i]:
                degree[j] -= 1
                if degree[j] == 0: 
                    dfs.append(j)
        
        return len(dfs) == n
        
# PRUE DFS TLE 
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        graph = [[] for _ in range(numCourses)]
        visited = [0 for _ in range(numCourses)]
        # create graph
        for pair in prerequisites:
            x, y = pair
            graph[x].append(y)
        # visit each node
        for i in range(numCourses):
            if not self.dfs(graph, visited, i):
                return False
        return True
    
    def dfs(self, graph, visited, i):
        # if ith node is marked as being visited, then a cycle is found
        if visited[i] == -1:
            return False
        # if it is done visted, then do not visit again
        if visited[i] == 1:
            return True
        # mark as being visited
        visited[i] = -1
        # visit all the neighbours
        for j in graph[i]:
            if not self.dfs(graph, visited, j):
                return False
        # after visit all the neighbours, mark it as done visited
        visited[i] = 1
        return True
