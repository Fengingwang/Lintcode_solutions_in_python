class Solution:
    def solveNQueens(self, n):
        # write your code here
        res = []
        used = [False] * n 
        # it contains for ith row the queen is palced in row[i] column
        self.dfs(n, 0, used, [], res)
        return res 
        
    def dfs(self, n, d, used, temp, res):
        if d == n:
            res.append(temp[:])
        for j in range(n):
            if self.isvalid(used, d, j):
                s = '.' * n
                used[d] = j
                self.dfs(n, d + 1, used, temp + [s[:j] + 'Q' + s[j + 1:]], res)
        
    def isvalid(self, used, row, col):
        for i in range(row):
            if used[i] == col or abs(row - i) == abs(used[i] - col):
                return False 
        return True
