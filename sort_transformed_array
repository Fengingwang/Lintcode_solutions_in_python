class Solution:
    """
    @param nums: a sorted array
    @param a: 
    @param b: 
    @param c: 
    @return: a sorted array
    """
    def sortTransformedArray(self, nums, a, b, c):
        # Write your code here
        if nums is None or len(nums) == 0: return []
        
        f = lambda x, a, b, c: a * x * x + b * x + c
        res = []
        left, right = 0, len(nums) - 1
        d = -1 if a > 0 else 1
        while left <= right:
            if d * f(nums[left], a, b, c) < d * f(nums[right], a, b, c):
                res.append(f(nums[left], a, b, c))
                left += 1
            else:
                res.append(f(nums[right], a, b, c))
                right -= 1
        return res[::d]
        
# 对于一个方程f(x) = ax2 + bx + c 来说，
# 如果a>0，则抛物线开口朝上，那么两端的值比中间的大，
# 如果a<0，则抛物线开口朝下，则两端的值比中间的小。
# 如果a=0，则为直线方法，是单调递增或递减的。
# 那么我们可以利用这个性质来解题，题目中说明了给定数组nums是有序的，如果不是有序的，我想很难有O(n)的解法。
# 正因为输入数组是有序的，我们可以根据a来分情况讨论：

# 当a>0，说明两端的值比中间的值大，那么此时我们从结果res后往前填数，
# 用两个指针分别指向nums数组的开头和结尾，指向的两个数就是抛物线两端的数，
# 将它们之中较大的数先存入res的末尾，然后指针向中间移，重复比较过程，直到把res都填满。

# 当a<0，说明两端的值比中间的小，那么我们从res的前面往后填，
# 用两个指针分别指向nums数组的开头和结尾，指向的两个数就是抛物线两端的数，
# 将它们之中较小的数先存入res的开头，然后指针向中间移，重复比较过程，直到把res都填满。

# 当a=0，函数是单调递增或递减的，那么从前往后填和从后往前填都可以，我们可以将这种情况和a>0合并。
