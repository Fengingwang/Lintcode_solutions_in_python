# 解题思路：
# 深度优先搜索（DFS）+ 剪枝（Pruning）
# 首先构建一个单词前缀prefix->单词word的字典mdict
# 深度优先搜索search(word, line)，其中word是当前单词，line是行数
# 利用变量matrix记录当前已经生成的单词
# 前缀prefix = matrix[0..line][line]，如果prefix对应单词不存在，则可以剪枝
# 否则枚举mdict[prefix]，并递归搜索

class Solution:
    """
    @param: words: a set of words without duplicates
    @return: all word squares
    """
    def wordSquares(self, words):
        # write your code here
        if not words or not words[0]:
            return []
        
        self.mapping = collections.defaultdict(set)
        self.n = len(words[0])
        
        for word in words:
            for i in range(self.n):
                self.mapping[word[:i]].add(word)
        
        self.matrix = []
        self.res = []
        
        for word in words:
            self.dfs(word, 1)
        
        return self.res
            
    def dfs(self, word, line):
        self.matrix.append(word)
        if line == self.n:
            self.res.append(self.matrix[:])
        else:
            prefix = ''.join(self.matrix[x][line] for x in range(line))
            for val in self.mapping[prefix]:
                self.dfs(val, line + 1)
        self.matrix.pop()
        
