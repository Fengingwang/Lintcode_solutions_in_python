class Solution:
    def maxArea(self, heights):
        # write your code here
        i, j = 0, len(heights) - 1
        res = 0
        
        while i < j: 
            res = max(min(heights[i], heights[j]) * (j - i), res)
            if heights[i] < heights[j]: 
                i += 1
            elif heights[i] > heights[j]: 
                j -= 1
            else: 
                i += 1
                j -= 1
        
        return res 
        
# 思路：
# 由于ai和aj (i<j) 组成的container的面积：S(i,j) = min(ai, aj) * (j-i)
# 所以对于任何S(i'>=i, j'<=j) >= S(i,j)，由于j'-i' <= j-i，
# 必然要有min(ai',aj')>=min(ai,aj)才行。同样可以采用头尾双指针向中间移动：
# 当a(left) < a(right)时，对任何j<right来说
# (1) min(a(left),aj) <= a(left) = min(a(left), a(right))
# (2) j-left < right-left
# 所以S(left, right) > S(left, j<right)。排除了所有以left为左边界的组合，因此需要右移left。
# 同理，当a(left) > a(right)时，需要左移right。
# 而当a(left) = a(right)时，需要同时移动left和right。
# 思路整理：
# left = 0, right = n-1
# (1) a[left] < a[right], left++
# (2) a[left] > a[right], right--
# (3) a[left] = a[right], left++, right--
# 终止条件：left>=right
