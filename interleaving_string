# 解题思路：动态规划。
# dp[i][j]表示s1[0...i-1]和s2[0...j-1]是否可以拼接为s3[0...i+j-1]，
# 可以拼接为true，不可以拼接为false。

class Solution:
    """
    @param s1: A string
    @param s2: A string
    @param s3: A string
    @return: Determine whether s3 is formed by interleaving of s1 and s2
    """
    def isInterleave(self, s1, s2, s3):
        # write your code here
        if s1 is None or s2 is None or s3 is None:
            return False
        if len(s1) + len(s2) != len(s3):
            return False
        
        # intial 
        f = [[False] * (len(s2) + 1) for i in range(len(s1) + 1)]
        f[0][0] = True
        for i in range(len(s1)):
            f[i + 1][0] = s1[:i + 1] == s3[:i + 1]
        for i in range(len(s2)):
            f[0][i + 1] = s2[:i + 1] == s3[:i + 1]
        
        # status and transfer
        for i in range(len(s1)):
            for j in range(len(s2)):
                f[i + 1][j + 1] = False
                if s1[i] == s3[i + j + 1]:
                    f[i + 1][j + 1] = f[i][j + 1]
                if s2[j] == s3[i + j + 1]:
                    f[i + 1][j + 1] |= f[i + 1][j]
        
        # return 
        return f[len(s1)][len(s2)]
                
                
                
                
                
