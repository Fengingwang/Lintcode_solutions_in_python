# 3 loops, same as 3sum logic, fix one then fix one then search i - j
# General verison at the end 

class Solution:
    """
    @param numbers: Give an array
    @param target: An integer
    @return: Find all unique quadruplets in the array which gives the sum of zero
    """
    def fourSum(self, nums, target):
        # write your code here
        nums.sort()
        res = []
        
        for k1 in range(0, len(nums) - 3):
            if k1 and nums[k1] == nums[k1 - 1]:
                continue 
            for k2 in range(k1 + 1, len(nums) - 2):
                if k2 != k1 + 1 and nums[k2] == nums[k2 - 1]:
                    continue 
                
                targ = target - nums[k1] - nums[k2]
                i, j = k2 + 1, len(nums) - 1
                while i < j:
                    if nums[i] + nums[j] == targ:
                        res.append([nums[k1], nums[k2], nums[i], nums[j]])
                        j -= 1
                        i += 1
                        while i < j and nums[i] == nums[i - 1]:
                            i += 1 
                        while i < j and nums[j] == nums[j + 1]:
                            j -= 1
                    elif nums[i] + nums[j] > targ:
                        j -= 1
                    else:
                        i += 1
                        
        return res
        
        
def fourSum(self, nums, target):
    nums.sort()
    results = []
    self.findNsum(nums, target, 4, [], results)
    return results

def findNsum(self, nums, target, N, result, results):
    if len(nums) < N or N < 2: return
    # solve 2-sum
    if N == 2:
        l, r = 0, len(nums) - 1
        while l < r:
            if nums[l] + nums[r] == target:
                results.append(result + [nums[l], nums[r]])
                l += 1
                r -= 1
                while l < r and nums[l] == nums[l - 1]:
                    l += 1
                while r > l and nums[r] == nums[r + 1]:
                    r -= 1
            elif nums[l] + nums[r] < target:
                l += 1
            else:
                r -= 1
    else:
        for i in range(0, len(nums) - N + 1):   # careful about range
            if target < nums[i] * N or target > nums[-1] * N:  # take advantages of sorted list
                break
            if (i == 0) or (i > 0 and nums[i-1] != nums[i]):  # recursively reduce N
                self.findNsum(nums[i + 1:], target - nums[i], N - 1, result+ [nums[i]], results)
    return
