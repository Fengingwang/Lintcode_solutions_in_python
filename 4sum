# 3 loops, same as 3sum logic, fix one then fix one then search i - j

class Solution:
    """
    @param numbers: Give an array
    @param target: An integer
    @return: Find all unique quadruplets in the array which gives the sum of zero
    """
    def fourSum(self, nums, target):
        # write your code here
        nums.sort()
        res = []
        
        for k1 in range(0, len(nums) - 3):
            if k1 and nums[k1] == nums[k1 - 1]:
                continue 
            for k2 in range(k1 + 1, len(nums) - 2):
                if k2 != k1 + 1 and nums[k2] == nums[k2 - 1]:
                    continue 
                
                targ = target - nums[k1] - nums[k2]
                i, j = k2 + 1, len(nums) - 1
                while i < j:
                    if nums[i] + nums[j] == targ:
                        res.append([nums[k1], nums[k2], nums[i], nums[j]])
                        j -= 1
                        i += 1
                        while i < j and nums[i] == nums[i - 1]:
                            i += 1 
                        while i < j and nums[j] == nums[j + 1]:
                            j -= 1
                    elif nums[i] + nums[j] > targ:
                        j -= 1
                    else:
                        i += 1
                        
        return res
