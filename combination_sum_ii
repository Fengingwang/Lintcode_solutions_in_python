class Solution:
    """
    @param candidates: A list of integers
    @param target: An integer
    @return: A list of lists of integers
    """
    def combinationSum2(self, candidates, target):
        # write your code here
        candidates.sort()
        res = []
        self.dfs_comsum(candidates, 0, target, [], res)
        return res 
        
    def dfs_comsum(self, nums, pos, target, curt, res):
        if target == 0:
            res.append(curt[:])
            return
        for i in range(pos, len(nums)):
            if i > pos and nums[i] == nums[i - 1]:
                continue
            if nums[i] > target: 
                return 
            curt.append(nums[i])
            self.dfs_comsum(nums, i + 1, target - nums[i], curt, res)
            # since a num can use once, so the pos is i + 1
            curt.pop()
        

class Solution:
    """
    @param num: Given the candidate numbers
    @param target: Given the target number
    @return: All the combinations that sum to target
    """
    def combinationSum2(self, num, target):
        # write your code here
        num.sort()
        result, temp, visited = [], [], [False] * len(num)
        self.dfs(num, target, 0, 0, temp, visited, result)
        return result
        
    def dfs(self, nums, target, pos, current, temp, visited, res):
        if current == target:
            res.append(temp[:])
        for i in range(pos, len(nums)):
            if current + nums[i] <= target and (i == 0 or nums[i] != nums[i - 1] or visited[i - 1] == True):
                temp.append(nums[i])
                visited[i] = True
                self.dfs(nums, target, i + 1, current + nums[i], temp, visited, res)
                temp.pop()
                visited[i] = False
                
                
                
 class Solution:
    """
    @param num: Given the candidate numbers
    @param target: Given the target number
    @return: All the combinations that sum to target
    """
    def combinationSum2(self, num, target):
        # write your code here
        num.sort()
        result, temp, visited = [], [], [False] * len(num)
        self.dfs(num, target, 0, 0, temp, visited, result)
        return result 
        
    def dfs(self, nums, target, pos, current, temp, visited, res):
        if current == target:
            res.append(temp[:])
        for i in range(pos, len(nums)):
            if current + nums[i] <= target:
                if (i > 0 and nums[i] == nums[i - 1] and visited[i - 1] == False):
                    continue
                temp.append(nums[i])
                visited[i] = True 
                self.dfs(nums, target, i + 1, current + nums[i], temp, visited, res)
                visited[i] = False 
                temp.pop()
