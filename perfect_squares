class Solution:
    def numSquares(self, n):
        # write your code here
        if n <= 0: return 0
        f = [sys.maxsize] * (n + 1)
        f[0] = 0
        
        for i in range(1, n + 1, 1):
            for j in range(1, int(i ** 0.5) + 1, 1):
                f[i] = min(f[i], f[i - j * j] + 1)
        
        return f[n]

# 动态规划Dynamic Programming
# 我们建立一个长度为n+1的一维dp数组，将第一个值初始化为0，其余值都初始化为INT_MAX, 
# i从0循环到n，j从1循环到i+j*j <= n的位置，
# 然后每次更新dp[i+j*j]的值，动态更新dp数组，
# 其中dp[i]表示正整数i能少能由多个完全平方数组成，
# 那么我们求n，就是返回dp[n]即可，也就是dp数组的最后一个数字。
