class Solution:
    def wordBreak(self, s, dict):
        # write your code here
        if len(dict) == 0 and len(s) == 0: return True 
        if len(dict) == 0: return False 
        if len(s) == 0: return True
        
        maxlen = max([len(w) for w in dict])
        n = len(s)
        
        f = [False] * (n + 1)
        f[0] = True 
        
        for i in range(1, n + 1):
            for j in range(1, min(maxlen, i) + 1):
                if f[i - j] == False: 
                    continue 
                if s[i - j: i] in dict: 
                    f[i] = True 
                    break
        
        return f[n]
        
class Solution:
    """
    @param: s: A string
    @param: dict: A dictionary of words dict
    @return: A boolean
    """
    def wordBreak(self, s, dict):
        # write your code here
        if len(dict) == 0:
            return len(s) == 0
        
        # intial 
        n = len(s)
        f = [False for i in range(n + 1)]
        f[0] = True
        maxlen = max([len(w) for w in dict])
        
        # status and transfer
        for i in range(1, n + 1):
            for j in range(1, min(i, maxlen) + 1):
                if f[i -j] == False:   # first part in the dict 
                    continue 
                if s[i - j:i] in dict: # second part in the dict 
                    f[i] = True
                    break
        
        # return 
        return f[n]
        

class Solution:
    def wordBreak(self, s, dict):
        dp = [False for i in range(len(s) + 1)]
        dp[0] = True
        for i in range(1, len(s) + 1):
            for k in range(i):
                if dp[k] and s[k:i] in dict:
                    dp[i] = True
        return dp[len(s)]
                    
        
        
