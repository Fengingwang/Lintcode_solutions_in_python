class Solution:
    """
    @param nums: A set of numbers.
    @return: A list of lists. All valid subsets.
    """
    def subsetsWithDup(self, nums):
        # write your code here
        nums.sort()
        res = []
        self.dfs_subset(nums, 0, [], res)
        return res 
        
    def dfs_subset(self, nums, pos, curt, res):
        res.append(curt[:])
        for i in range(pos, len(nums)):
            if i > pos and nums[i] == nums[i - 1]:
                continue 
            curt.append(nums[i])
            self.dfs_subset(nums, i + 1, curt, res)
            curt.pop()


class Solution:
    """
    @param nums: A set of numbers
    @return: A list of lists
    """
    def subsetsWithDup(self, nums):
        # write your code here
        if nums is None:
            return []
        result = []
        nums.sort()
        self.dfs(nums, 0, [], result)
        return result
        
    def dfs(self, nums, pos, subset, res):
        res.append([] + subset)
        for i in range(pos, len(nums)):
            if (i != pos and nums[i] == nums[i - 1]):
                continue 
            subset.append(nums[i])
            self.dfs(nums, i + 1, subset, res)
            subset.pop()       
