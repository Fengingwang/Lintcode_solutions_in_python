class Solution:
    """
    @param costs: n x 3 cost matrix
    @return: An integer, the minimum cost to paint all houses
    """
    def minCost(self, costs):
        # write your code here
        if costs is None or len(costs) == 0: return 0
        
        n = len(costs)
        f = [[0 for j in range(3)] for i in range(n)]
        
        f[0] = costs[0]
        for i in range(1, n):
            f[i][0] = min(f[i - 1][1], f[i - 1][2]) + costs[i][0]
            f[i][1] = min(f[i - 1][0], f[i - 1][2]) + costs[i][1]
            f[i][2] = min(f[i - 1][0], f[i - 1][1]) + costs[i][2]
        
        return min(f[n - 1][0], f[n - 1][1], f[n - 1][2])
    
    
# 思路: 一道很明显的动态规划的题目. 
# 每个房子有三种染色方案, 那么如果当前房子染红色的话, 
# 最小代价将是上一个房子的绿色和蓝色的最小代价+当前房子染红色的代价. 
# 对另外两种颜色也是如此. 因此动态转移方程为:
# dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + costs[i-1][0];
# dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + costs[i-1][1];
# dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + costs[i-1][2];
