外卡匹配和正则匹配最大的区别就是在星号的使用规则上，
对于正则匹配来说，星号不能单独存在，前面必须要有一个字符，而星号存在的意义就是表明前面这个字符的个数可以是任意个，包括0个，
那么就是说即使前面这个字符并没有在s中出现过也无所谓，只要后面的能匹配上就可以了。
而外卡匹配就不是这样的，外卡匹配中的星号跟前面的字符没有半毛钱关系，
如果前面的字符没有匹配上，那么直接返回false了，根本不用管星号。

动态规划：
case 1:
如果p.charAt(i)==s.charAt(j)或则p.charAt(i)=='?',相当于将最后一个字符匹配掉:
flag[i][j]=flag[i-1][j-1];
case 2:
如果p.charAt(i)=='*'
'*'可以选择匹配0个字符，此时flag[i][j]=flag[i-1][j];
'*'可以选择匹配1个字符，此时flag[i][j]=flag[i-1][j-1];
……所以，
flag[i][j] = flag[i-1][j] || flag[i-1][j-1] ||……|| flag[i-1][0]。
化简，当p.charAt(i)=='*'时:
flag[i][j-1]=flag[i-1][j-1]||flag[i-1][j-2]||……||flag[i-1][0]
所以
flag[i][j] = flag[i-1][j] || flag[i][j-1]

class Solution:
    """
    @param s: A string 
    @param p: A string includes "?" and "*"
    @return: is Match?
    """
    def isMatch(self, s, p):
        # write your code here
        m = len(s)
        n = len(p)
        
        f = [[False for _ in range(n + 1)] for _ in range(m + 1)]
        f[0][0] = True
        
        for j in range(1, n + 1):
            if p[j - 1] == '*':
                f[0][j] = f[0][j - 1]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '?' or p[j - 1] == s[i - 1]:
                    f[i][j] = f[i - 1][j - 1]
                elif p[j - 1] == '*':
                    f[i][j] = f[i][j - 1] or f[i - 1][j]
                else:
                    f[i][j] = False 
        
        return f[-1][-1]
