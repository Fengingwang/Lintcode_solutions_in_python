# 定义
# PrefixSum[i] = A[0] + A[1] + … A[i−1]
# PrefixSum[0] = 0
# 则Sum(i~j) = PrefixSum[j + 1] - PrefixSum[i] 
# 1.得到PrefixSum 
# 2.把PrefixSum从小到大排序 
# 3.找到PrefixSum[i] − PrefixSum[i − 1] 的最小值

class Solution:
    """
    @param: nums: A list of integers
    @return: A list of integers includes the index of the first number and the index of the last number
    """
    def subarraySumClosest(self, nums):
        # write your code here
        if nums is None or len(nums) == 0:
            return 
        if len(nums) == 1:
            return [0, 0]
        
        n = len(nums)
        sumi = [(0, -1)]
        for i, num in enumerate(nums):
            sumi.append((sumi[-1][0] + num, i))
            
        sumi.sort()
        
        temp, res = sys.maxsize, []
        for i in range(1, n, 1):
            if temp > sumi[i][0] - sumi[i - 1][0]:
                temp = sumi[i][0] - sumi[i - 1][0]
                left = min(sumi[i][1], sumi[i - 1][1]) + 1
                right = max(sumi[i][1], sumi[i - 1][1]) 
                res = [left, right]
            
        return res
