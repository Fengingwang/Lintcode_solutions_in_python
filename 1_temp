
def removeduplicate(self, head):
    if head is None or head.next is None:
        return head 
        
    dummy = ListNode(0)
    dummy.next = head 
    head = dummy 
    
    while head.next is not None:
        if head.val == head.next.val:
            head.next = head.next.next 
        else:
            head = head.next 
    
    return dummy.next

def findmiddle(self, head):
    slow, fast = head, head 
    while fast is not None and fast.next is not None:
        slow = slow.next 
        fast = fast.next.next 
    return slow.next
    
def reverse(self, head):
    curt = None
    while head is not None:
        temp = head.next 
        head.next = curt
        curt = head
        head = temp 
    return curt

def merge(self, list1, list2):
    
    if list1 is None: return list2
    if list2 is None: return list1
    
    head = None
    if list1.val < list2.val:
        head = list1
        list1 = list1.next 
    else:
        head = list2
        list2 = list2.next
        
    temp = head 
    while list1 is not None and list2 is not None:
        if list1.val < list2.val:
            temp.next = list1
            temp = list1
            list1 = list1.next 
        else:
            temp.next = list2
            temp = list2
            list2 = list2.next
    if list1 is not None:
        temp.next = list1
    if list2 is not None:
        temp.next = list2
    
    return head 
        
