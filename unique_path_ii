class Solution:
    """
    @param obstacleGrid: A list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        # write your code here
        if len(obstacleGrid) == 0 or len(obstacleGrid[0]) == 0:
            return 0
        
        # intalization
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        f = [[0 for x in range(n)] for y in range(m)]
        
        # status and transfer
        for i in range(m):
            if obstacleGrid[i][0] == 0:
                f[i][0] = 1
            else:
                f[i][0] = 0
                break
        
        for j in range(n):
            if obstacleGrid[0][j] == 0:
                f[0][j] = 1
            else:
                f[0][j] = 0
                break 
        
        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j] == 1:
                    f[i][j] = 0
                else:
                    f[i][j] = f[i - 1][j] + f[i][j - 1]
        
        # return 
        return f[-1][-1]
