class Solution:
    """
    @param obstacleGrid: A list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        
        if len(obstacleGrid) == 0 or len(obstacleGrid[0]) == 0:
            return 0
         
        # intial   
        m = len(obstacleGrid); 
        n = len(obstacleGrid[0])
        f = [[0 for i in range(n)] for j in range(m)]
        
        # status and transfer
        for i in range(m):
            if obstacleGrid[i][0] == 0:
                f[i][0] = 1
            else:
                f[i][0] == 0
                break
            
        for i in range(n):
            if obstacleGrid[0][i] == 0:
                f[0][i] = 1
            else:
                f[0][i] = 0
                break
            
        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j] == 1: 
                    f[i][j] = 0
                else:
                    f[i][j] = f[i-1][j] + f[i][j-1]
        
        # return         
        return f[m-1][n-1]
