# 解题思路：
# 可以从Moore投票算法中得到一些启发
# 观察可知，数组中至多可能会有2个出现次数超过 ⌊ n/3 ⌋ 的众数
# 记变量n1, n2为候选众数； c1, c2为它们对应的出现次数
# 遍历数组，记当前数字为num
# 若num与n1或n2相同，则将其对应的出现次数加1
# 否则，若c1或c2为0，则将其置为1，对应的候选众数置为num
# 否则，将c1与c2分别减1
# 最后，再统计一次候选众数在数组中出现的次数，若满足要求，则返回之。


class Solution:
    """
    @param: nums: a list of integers
    @return: The majority number that occurs more than 1/3
    """
    def majorityNumber(self, nums):
        # write your code here
        candidate1, count1 = None, 0
        candidate2, count2 = None, 0
        
        # do the candidate vs num comparison first
        for num in nums:
            if candidate1 == num:
                count1 += 1
            elif candidate2 == num:
                count2 += 1
            elif count1 == 0:
                count1 += 1
                candidate1 = num
            elif count2 == 0:
                count2 += 1
                candidate2 = num
            else:
                count1 -= 1
                count2 -= 1
    
        count1, count2 = 0, 0
        for num in nums:
            if candidate1 == num:
                count1 += 1
            elif candidate2 == num:
                count2 += 1
    
        return candidate1 if count1 > count2 else candidate2
