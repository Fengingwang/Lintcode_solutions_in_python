class Solution:
    """
    @param N: a integer
    @return: return a integer
    """
    def numTilings(self, N):
        # write your code here
        if N == 1: return 1
        if N == 2: return 2
        if N == 3: return 5
        
        M = int(1e9 + 7)
        f = [0] * (N + 1)
        f[0], f[1], f[2] = 1, 1, 2
        
        for i in range(3, N + 1):
            f[i] = (2 * f[i - 1] + f[i - 3]) % M
        
        return f[N]
        
# 这道题是关于多米诺骨牌和三格骨牌的，其中由两个方形格子组成的是多米诺骨牌（音译，即为双格骨牌），
# 而由三个方形格子组成的‘L’型的是三格骨牌，
# 但其实本质还是个拼格子的题，并没有利用到骨牌酷炫的连倒技能，倒反而更像是俄罗斯方块中的形状。
# 说是有一个2xN大小的棋盘，我们需要用这些多米诺和三格骨牌来将棋盘填满，
# 问有多少种不同的填充方法，结果需要对一个超大数取余。
# N = 1 then 1
# N = 2 then 2
# N = 3 then 5
# N = 4 then 11
# 根据目前的状况，我们可以总结一个很重要的规律，
# 就是dp[n]是由之前的dp值组成的，其中 dp[n-1] 和 dp[n-2] 各自能贡献一种组成方式，
# 而dp[n-3]，一直到dp[0]，都能各自贡献两种组成方式，所以状态转移方程呼之欲出：

# dp[n] = dp[n-1] + dp[n-2] + 2 * (dp[n-3] + ... + dp[0])

#         = dp[n-1] + dp[n-3] + dp[n-2] + dp[n-3] + 2 * (dp[n-4] + ... dp[0])

#         = dp[n-1] + dp[n-3] + dp[n-1]

#         = 2 * dp[n-1] + dp[n-3]
