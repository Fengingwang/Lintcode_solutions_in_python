BST中找中序遍历的后继节点
class Solution:
    def inorderSuccessor(self, root, p):
        # write your code here
        if root is None or p is None:
            return 
        if root.val <= p.val:
            return self.inorderSuccessor(root.right, p)
        else:
            left = self.inorderSuccessor(root.left, p)
            if left is None:
                return root 
            else:
                return left

# case1: 目标节点如果有右节点的情况比较好处理，
# 我们只要返回它的右节点的最左边的节点就行了
# （右节点自己没有左节点时则是右节点本身。
# case2: 如果目标节点没有右节点，
# 说明比目标节点稍大的节点应该在上面，
# 因为我们知道目标节点的左节点肯定是比目标节点要小的。
                
# 方法充分地利用到了BST的性质，
# 我们首先看根节点值和p节点值的大小，
# 如果根节点值大，说明p节点肯定在左子树中，
# 那么此时我们先将res赋为root，然后root移到其左子节点，
# 循环的条件是root存在，
# 我们再比较此时root值和p节点值的大小，如果还是root值大，我们重复上面的操作，
# 如果p节点值，那么我们将root移到其右子节点，
# 这样当root为空时，res指向的就是p的后继节点
