BST中找中序遍历的后继节点

class Solution:
    """
    @param: root: The root of the BST.
    @param: p: You need find the successor node of p.
    @return: Successor of p.
    """
    def inorderSuccessor(self, root, p):
        # write your code here
        if not root or not p: return 
        self.pre, self.suc = TreeNode(None), TreeNode(None)
        self.search(root, p)
        if self.suc.val == None: return 
        else: return self.suc       
        
    def search(self, root, p):
        if not root: return 
        self.search(root.left, p)
        if p == self.pre: self.suc = root 
        self.pre = root
        self.search(root.right, p)
        
class Solution:
    def inorderSuccessor(self, root, p):
        # write your code here
        if root is None or p is None:
            return 
        if root.val <= p.val:
            return self.inorderSuccessor(root.right, p)
        else:
            left = self.inorderSuccessor(root.left, p)
            if left is None:
                return root 
            else:
                return left
            
