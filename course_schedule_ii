class Solution:
    def findOrder(self, numCourses, prerequisites):
        # write your code here
        n = numCourses
        G = [[] for _ in range(n)]
        degree = [0] * n 
        
        for i, j in prerequisites:
            G[j].append(i)
            degree[i] += 1
        
        dfs = [i for i in range(n) if degree[i] == 0]
        for i in dfs: 
            for j in G[i]:
                degree[j] -= 1
                if degree[j] == 0: 
                    dfs.append(j)
            
        return dfs if len(dfs) == n else []

# PRUE DFS TLE 
class Solution:
    # @param {integer} numCourses
    # @param {integer[][]} prerequisites
    # @return {integer[]}
    def findOrder(self, numCourses, prerequisites):
        # use DFS to parse the course structure
        self.graph = collections.defaultdict(list) # a graph for all courses
        self.res = [] # start from empty
        for pair in prerequisites:
            self.graph[pair[0]].append(pair[1]) 
        self.visited = [0 for x in range(numCourses)] # DAG detection 
        for x in range(numCourses):
            if not self.DFS(x):
                return []
             # continue to search the whole graph
        return self.res
    
    def DFS(self, node):
        if self.visited[node] == -1: # cycle detected
            return False
        if self.visited[node] == 1:
            return True # has been finished, and been added to self.res
        self.visited[node] = -1 # mark as visited
        for x in self.graph[node]:
            if not self.DFS(x):
                return False
        self.visited[node] = 1 # mark as finished
        self.res.append(node) # add to solution as the course depenedent on previous ones
        return True
