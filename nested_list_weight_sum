"""
This is the interface that allows for creating nested lists.
You should not implement it, or speculate about its implementation

class NestedInteger(object):
    def isInteger(self):
        # @return {boolean} True if this NestedInteger holds a single integer,
        # rather than a nested list.

    def getInteger(self):
        # @return {int} the single integer that this NestedInteger holds,
        # if it holds a single integer
        # Return None if this NestedInteger holds a nested list

    def getList(self):
        # @return {NestedInteger[]} the nested list that this NestedInteger holds,
        # if it holds a nested list
        # Return None if this NestedInteger holds a single integer
"""


class Solution(object):
    # @param {NestedInteger[]} nestedList a list of NestedInteger Object
    # @return {int} an integer
    def depthSum(self, nestedList):
        # Write your code here
        if len(nestedList) == 0:
            return 0
        
        stack = []
        res = 0
        
        # initize stack with (val, depth) 
        for val in nestedList:
            stack.append((val, 1))
        
        while stack: 
            elem, depth = stack.pop(0)
            if elem.isInteger():
                res += depth * elem.getInteger()
            else:
                for subelem in elem.getList():
                    stack.append((subelem, depth + 1))
        
        return res 
            
