# 解题思路：
# 动态规划（Dynamic Programming）
# 问题的实质是从长度为n的prices数组中挑选出至多2 * k个元素，组成一个交易（买卖）序列。
# 交易序列中的首次交易为买入，其后卖出和买入操作交替进行。
# 总收益为交易序列中的偶数项之和 - 奇数项之和。
# dp[j]表示完成j次交易时的最大收益，转移方程如下：
# dp[j] = max(dp[j], dp[j - 1] + prices[i] * [1, -1][j % 2])
# 当j为奇数时，交易类型为买入；
# 当j为偶数时，交易类型为卖出。
# 由于直接采用动态规划会返回Time Limit Exceeded，可以针对题目部分样例做出下面的优化：
# 令最大交易次数为k，数组长度为size；
# 则当k > size / 2时，问题可以转化为：Best Time to Buy and Sell Stock II

class Solution:
    def maxProfit(self, k, prices):
        n, res = len(prices), 0
        if n < 2: return 0
        if k > n //2:  # 现在这个情况，就相当于题目2
            for i in range(1, n):
                if prices[i] > prices[i-1]:
                    res += prices[i] - prices[i-1]
            return res
 
        hold, sold = [float('-inf')] * (k + 1), [0] * (k + 1)
        for price in prices:
            for j in range(1, k+1):
                hold[j] = max(hold[j], sold[j-1]-price)  # hold->hold, sold->hold
                sold[j] = max(sold[j], hold[j]+price)  # sold->sold, hold->sold
        return sold[k]
 
 

# class Solution:
#     """
#     @param k: an integer
#     @param prices: an integer array
#     @return: an integer which is maximum profit
#     """
#     def maxProfit(self, k, prices):
#         # write your code here
#         size = len(prices)
#         if k >= size // 2:
#             return self.quickSolve(size, prices)
#         dp = [None] * (2 * k + 1)
#         dp[0] = 0
#         for i in range(size):
#             for j in range(min(2 * k, i + 1) , 0 , -1):
#                 dp[j] = max(dp[j], dp[j - 1] + prices[i] * [1, -1][j % 2])
#         return max(dp)

#     def quickSolve(self, size, prices):
#         sum = 0
#         for x in range(size - 1):
#             if prices[x + 1] > prices[x]:
#                 sum += prices[x + 1] - prices[x]
#         return sum
