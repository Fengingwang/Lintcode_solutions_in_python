POWER OF TWO 
class Solution:
    def isPowerOfTwo(self, n):
        # Write your code here
        if n <= 0: return False
        if n == 1: return True
        return n % 2 == 0 and self.isPowerOfTwo(n / 2)

POWER OF THREE   
class Solution(object):
    def isPowerOfThree(self, n):
        if n <= 0: return False
        if n == 1: return True
        return n % 3 == 0 and self.isPowerOfThree(n / 3)
        
POWER OF FOUR
class Solution:
    def isPowerOfFour(self, n):
        # Write your code here
        if n <= 0: return False
        if n == 1: return True
        return n % 4 == 0 and self.isPowerOfFour(n / 4)
        
O(1) Check Power of 2
解题思路：如果一个整数是2的幂，那么它的二进制形式最高位为1，其余各位为0
class Solution:
    def checkPowerOf2(self, n):
        # write your code here
        if n < 1:
            return False
        else:
            return (n & (n - 1)) == 0
FAST POWER
# Calculate the a^n % b where a, b and n are all 32bit integers
# (a * b) % p = (a % p * b % p) % p
# 两个特殊情况: power 0,1的时候
class Solution:
    def fastPower(self, a, b, n):
        if n == 1:
            return a % b
        elif n == 0:
            # do not use `1` instead `1 % b` because `b = 1`
            return 1 % b
        elif n < 0:
            return -1
            
        # (a * b) % p = ((a % p) * (b % p)) % p
        product = self.fastPower(a, b, n // 2)
        product = (product * product) % b
        
        if n % 2 == 1:
            product = (product * a) % b

        return product
Super POW      
