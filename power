POWER OF TWO 
class Solution:
    def isPowerOfTwo(self, n):
        # Write your code here
        if n <= 0: return False
        if n == 1: return True
        return n % 2 == 0 and self.isPowerOfTwo(n / 2)

POWER OF THREE   
class Solution(object):
    def isPowerOfThree(self, n):
        if n <= 0: return False
        if n == 1: return True
        return n % 3 == 0 and self.isPowerOfThree(n / 3)
        
POWER OF FOUR
class Solution:
    def isPowerOfFour(self, n):
        # Write your code here
        if n <= 0: return False
        if n == 1: return True
        return n % 4 == 0 and self.isPowerOfFour(n / 4)
        
O(1) Check Power of 2
解题思路：如果一个整数是2的幂，那么它的二进制形式最高位为1，其余各位为0
class Solution:
    def checkPowerOf2(self, n):
        # write your code here
        if n <= 0: return False 
        return (n & (n - 1)) == 0
        
FAST POWER
# Calculate the a^n % b where a, b and n are all 32bit integers
# (a * b) % p = (a % p * b % p) % p
# 两个特殊情况: power 0,1的时候
class Solution:
    def fastPower(self, a, b, n):
        # write your code here
        if n < 0: return
        if n == 0: return 1 % b
        if n == 1: return a % b        
        temp = self.fastPower(a, b, n // 2)
        temp = (temp * temp) % b
        if n % 2 == 1:
            temp = (temp * a) % b        
        return temp 
        
Super POW  
# n1 * n2 % 1337 = (n1 % 1337) * (n2 % 1337) % 1337
# (a * b) % c  = (a % c) * (b % c) % c
class Solution:
    def superPow(self, a, b):
        # Write your code here
        res = 1
        for i in range(len(b)):
            res = self.pow(res, 10) * self.pow(a, b[i]) % 1337
        return res 
        
    def pow(self, a, b):
        if b == 0: return 1
        if b == 1: return a % 1337
        return self.pow(a % 1337, b // 2) * self.pow(a % 1337, b - b // 2) % 1337

