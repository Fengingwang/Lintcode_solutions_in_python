# The basic thoughts underline is a greedy style
# Every one more jump, you want to jump as far as possible
# In Jump Game I, when you at position i, you care about what is the furthest position could be reached from i th position
# In Jump Game II, you care about what would be the next furthest jump could be made 
#                  when you could reach as far as ith position from last jump
#                  So you iterate all positions could be reached from last jump till ith position to find it out

# greedy 
class Solution:
    def jump(self, A):
        # write your code here
        if len(A) < 2: return 0
        
        step, curtmax, nextmax = 0, 0, 0
        
        for i in range(0, len(A) - 1, 1):
            nextmax = max(nextmax, i + A[i])
            if i == curtmax: 
                curtmax = nextmax 
                step += 1
        
        return step 
   
 # DP TLE 
 class Solution:
    def jump(self, A):
        # write your code here
        if len(A) < 2: return 0
        
        f = [sys.maxsize] * len(A)
        f[0] = 0
        
        for i in range(1, len(A)):
            for j in range(i):
                if j + A[j] >= i: 
                    f[i] = min(f[i], f[j] + 1)
        
        return f[-1]
