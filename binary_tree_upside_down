# 这道题让我们把一棵二叉树上下颠倒一下，而且限制了右节点要么为空要么一定会有对应的左节点。
# 上下颠倒后:
# 左节点 ---> 根节点
# 右节点 ---> 左节点
# 父节点 ---> 右节点
# 相当于顺时针旋转了一下
# 递归解法:
# 对一个根节点来说,
# 首先判断这个根节点是否存在，且其有没有左子节点，如果不满足这两个条件的话，直接返回即可，不需要翻转操作。
# 不停的对左节点调用递归函数，
# 直到到达最左子节点开始翻转，
# 翻转好最左子节点后，开始回到上一个左子节点继续翻转即可，直至翻转完整棵树

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution(object):
    def upsideDownBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        if root is None or root.left is None:
            return root
        
        newHead = self.upsideDownBinaryTree(root.left)
        root.left.left = root.right
        root.left.right = root
        root.left = None
        root.right = None
        
        return newHead
    
