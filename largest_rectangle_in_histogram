Search from the middle to left and right, find the first element that smaller than it
Since the stack is increasing
the left_first_smaller_one is the element just left to it
the right_first_smaller_one is kind of complex: we continuouly add num from heights, if the to_add one is smaller than 
    the last one in stack, it should be the right_first_smaller. This is also where the while comes from 
class Solution:
    """
    @param height: A list of integer
    @return: The area of largest rectangle in the histogram
    """
    def largestRectangleArea(self, heights):
        indices_stack = []
        area = 0
        for index, height in enumerate(heights + [-1]):
            while indices_stack and heights[indices_stack[-1]] >= height:
                popped_index = indices_stack.pop()
                left_index = indices_stack[-1] if indices_stack else -1
                width = index - left_index - 1
                area = max(area, width * heights[popped_index])
                
            indices_stack.append(index)
            
        return area
                
