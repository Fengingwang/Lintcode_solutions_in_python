# 求两个不重叠的子数组差值的最大值
# 这个题目与 Maximum Subarray 有很多的相似之处，都是求解不重叠的部分的数据
# 但是这个要多一个最小值序列，因此需要求解4个序列。
# 两次遍历，从左到右和从右到左。
# 用两个数组leftMin[i], LeftMax[i]
# 保存左侧到当前位置i的最大子数组和最小子数组的值，
# 再从右往左遍历找到右侧当前位置的最大子数组和最小子数组的值

class Solution:
    """
    @param nums: A list of integers
    @return: An integer indicate the value of maximum difference between two substrings
    """
    def maxDiffSubArrays(self, nums):
        # write your code here
        if nums is None or len(nums) == 0:
            return 0
            
        n = len(nums)
        leftmax, leftmin = [0] * n, [0] * n
        rightmax, rightmin = [0] * n, [0] * n
        
        sumi, minp, maxsub = 0, 0, -sys.maxsize 
        for i in range(0, n, 1):
            sumi += nums[i]
            maxsub = max(maxsub, sumi - minp)
            minp = min(minp, sumi)
            leftmax[i] = maxsub 
        
        sumi, minp, maxsub = 0., 0, -sys.maxsize
        for i in range(n - 1, 0 - 1, -1):
            sumi += nums[i]
            maxsub = max(maxsub, sumi - minp)
            minp = min(minp, sumi)
            rightmax[i] = maxsub
            
        sumi, maxp, minsub = 0, 0, sys.maxsize
        for i in range(0, n, 1):
            sumi += nums[i]
            minsub = min(minsub, sumi - maxp)
            maxp = max(maxp, sumi)
            leftmin[i] = minsub 
        
        sumi, maxp, minsub = 0, 0, sys.maxsize
        for i in range(n - 1, 0 - 1, -1):
            sumi += nums[i]
            minsub = min(minsub, sumi - maxp)
            maxp = max(maxp, sumi)
            rightmin[i] = minsub
            
        diff = 0
        for i in range(0, n - 1, 1):
            diff = max(diff, abs(leftmax[i] - rightmin[i + 1]))
            diff = max(diff, abs(leftmin[i] - rightmax[i + 1]))
            
        return int(diff)
        
