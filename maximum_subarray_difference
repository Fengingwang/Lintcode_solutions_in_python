# 求两个不重叠的子数组差值的最大值
# 这个题目与 Maximum Subarray 有很多的相似之处，都是求解不重叠的部分的数据
# 但是这个要多一个最小值序列，因此需要求解4个序列。
# 两次遍历，从左到右和从右到左。
# 用两个数组leftMin[i], LeftMax[i]
# 保存左侧到当前位置i的最大子数组和最小子数组的值，
# 再从右往左遍历找到右侧当前位置的最大子数组和最小子数组的值

class Solution:
    """
    @param: nums: A list of integers
    @return: An integer indicate the value of maximum difference between two substrings
    """
    def maxDiffSubArrays(self, nums):
        # write your code here
        if nums is None or len(nums) == 0:
            return 0
        length = len(nums)
        leftMax, leftMin = [0] * length, [0] * length
        rightMax, rightMin = [0] * length, [0] * length
        summary, minVal, maxVal = 0, 0, float('-inf')
        for i in range(length):
            summary += nums[i]
            maxVal = max(maxVal, summary - minVal)
            minVal = min(summary, minVal)
            leftMax[i] = maxVal
        summary, minVal, maxVal = 0, 0, float('-inf')
        for i in range(length - 1, -1, -1):
            summary += nums[i]
            maxVal = max(maxVal, summary - minVal)
            minVal = min(summary, minVal)
            rightMax[i] = maxVal
        summary, minVal, maxVal = 0, float('inf'), 0
        for i in range(length):
            summary += nums[i]
            minVal = min(minVal, summary - maxVal)
            maxVal = max(summary, maxVal)
            leftMin[i] = minVal
        summary, minVal, maxVal = 0, float('inf'), 0
        for i in range(length - 1, -1, -1):
            summary += nums[i]
            minVal = min(minVal, summary - maxVal)
            maxVal = max(summary, maxVal)
            rightMin[i] = minVal
        diff = 0
        for i in range(length - 1):
            diff = max(diff, abs(leftMax[i] - rightMin[i + 1]))
            diff = max(diff, abs(leftMin[i] - rightMax[i + 1]))
        return diff
        
            
