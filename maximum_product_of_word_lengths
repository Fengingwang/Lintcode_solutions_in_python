class Solution:
    def maxProduct(self, words):
        # Write your code here
        if len(words) <= 1: return 0
        
        n = len(words)
        arr = [0] * n 
        for i, s in enumerate(words):
            for c in s: 
                arr[i] |= 1 << (ord(c) - ord('a'))
        
        res = 0
        for i in range(n):
            for j in range(i + 1, n):
                if not (arr[i] & arr[j]):
                    res = max(res,  len(words[i]) * len(words[j]))
        
        return res
                    
# 这道题给我们了一个单词数组，让我们求两个没有相同字母的单词的长度之积的最大值。
# 方法是每两个单词先比较，如果没有相同字母，则计算其长度之积，然后每次更新结果就能找到最大值。
# 但是我开始想的两个单词比较的方法是利用哈希表先将一个单词的所有出现的字母存入哈希表
# 然后检查另一个单词的各个字母是否在哈希表出现过，若都没出现过，则说明两个单词没有相同字母，
# 则计算两个单词长度之积并更新结果。
# 但是这种判断方法无法通过OJ的大数据集，
# 上网搜大神们的解法，都是用了mask，
# 因为题目中说都是小写字母，那么只有26位，一个整型数int有32位，
# 我们可以用后26位来对应26个字母，
# 若为1，说明该对应位置的字母出现过，那么每个单词的都可由一个int数字表示，
# 两个单词没有共同字母的条件是这两个int数与为0
