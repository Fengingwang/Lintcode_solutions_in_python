二叉树进行前序遍历时，首先访问根结点然后遍历左子树，最后遍历右子树。
在遍历左、右子树时，仍然先访问根结点，然后遍历左子树，最后遍历右子树。可以看出采用递归的方法非常简单，
如果不用递归，我们可以通过一个栈来辅助遍历。
在先序遍历中，访问完根节点，我们接着遍历它的左子树，它的右子树要等左子树遍历完成后再遍历，所以我们先把它存起来。
而左子树的头节点（区别于根节点）也会有它的右子树，这棵右子树需要比之前的右子树先遍历（因为它是根节点的左子树中的），所以存储采用栈的结构。
当遍历到某一个节点没有左子树后，我们从栈中取出右子树节点继续遍历，直到遍历完整棵树。

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: A Tree
    @return: Preorder in ArrayList which contains node values.
    """
    def preorderTraversal(self, root):
        # write your code here
        self.results = []
        self.traverse(root)
        return self.results
        
    def traverse(self, root):
        if root is None:
            return 
        self.results.append(root.val)
        self.traverse(root.left)
        self.traverse(root.right)
        
class Solution:
    """
    @param root: A Tree
    @return: Preorder in ArrayList which contains node values.
    """
    def preorderTraversal(self, root):
        if root is None:
            return []
        stack = [root]
        preorder = []
        while stack:
            node = stack.pop()
            preorder.append(node.val)
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
        return preorder
        
