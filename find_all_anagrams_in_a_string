题目大意：
给定一个字符串s与一个非空字符串p，寻找s中所有p的字谜变换的起始下标。输出顺序无所谓。
字符统计，单词的字谜变换（anagram）是指与其字母个数相同只是顺序不同的单词

from collections import Counter
class Solution:
    """
    @param s: a string
    @param p: a string
    @return: a list of index
    """
    def findAnagrams(self, s, p):
        # write your code here
        if len(s) < len(p):
            return []
        
        res = []
        lens = len(s)
        lenp = len(p)
        
        maps = Counter(s[0: lenp - 1])
        mapp = Counter(p)
        
        for i in range(lenp - 1, lens):
            maps[s[i]] += 1
            if maps == mapp:
                res.append(i - lenp + 1)
            maps[s[i - lenp + 1]] -= 1
            if maps[s[i - lenp + 1]] == 0:
                del maps[s[i - lenp + 1]]
        
        return res 
        
from collections import Counter
class Solution:
    """
    @param s: a string
    @param p: a string
    @return: a list of index
    """
    def findAnagrams(self, s, p):
        # write your code here
        
        res = []
        if len(s) < len(p):
            return res 
        
        cnts = Counter(s[:len(p) - 1])
        cntp = Counter(p)
        
        for i in range(len(p) - 1, len(s)):
            cnts[s[i]] += 1 # include a new char in the window
            if cnts == cntp:  # This step is O(1), since there are at most 26 English letters 
                res.append(i - len(p) + 1) # append the starting index
            cnts[s[i - len(p) + 1]] -= 1  # decrease the count of oldest char in the window
            if cnts[s[i - len(p) + 1]] == 0: # remove the count if it is 0
                del cnts[s[i - len(p) + 1]]
        return res
