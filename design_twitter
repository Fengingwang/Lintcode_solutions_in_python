from collections import defaultdict
from heapq import heappush, heappop

class MiniTwitter:
    def __init__(self):
        # do intialization if necessary
        self.map = defaultdict(list)
        self.follow_id = defaultdict(list)
        self.time = 0
  
    def postTweet(self, user_id, tweet_text):
        # write your code here
        newTweet = Tweet.create(user_id, tweet_text)
        self.map[user_id].append((self.time, newTweet))      
        self.time += 1
        return newTweet
   
    def getNewsFeed(self, user_id):
        # write your code here
        heap = []
        for follow in self.follow_id[user_id]:
            for time, tweet in self.map[follow]:
                heappush(heap, (-time, tweet))
        for time, tweet in self.map[user_id]:
            heappush(heap, (-time, tweet))
        n = len(heap)    
        result = []
        i = 0 
        while i < 10 and i < n:
            time, tweet = heappop(heap)
            result.append(tweet)
            i += 1    
        return result
       
    def getTimeline(self, user_id):
        # write your code here
        heap = []
        for time, tweet in self.map[user_id]:
            heappush(heap, (-time, tweet))
        result = []
        i = 0 
        n = len(heap)
        while i < 10 and i < n:
            time, tweet = heappop(heap)
            result.append(tweet)
            i += 1    
        return result
        
    def follow(self, from_user_id, to_user_id):
        # write your code here
        if to_user_id not in self.follow_id[from_user_id]:
            self.follow_id[from_user_id].append(to_user_id)
     
    def unfollow(self, from_user_id, to_user_id):
        # write your code here
        if to_user_id in self.follow_id[from_user_id]:
            self.follow_id[from_user_id].remove(to_user_id)
