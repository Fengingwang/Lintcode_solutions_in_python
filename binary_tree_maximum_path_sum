class Solution:
    def maxPathSum(self, root):
        # write your code here
        self.maxsum = -sys.maxsize
        self.helper(root)
        return self.maxsum
        
    def helper(self, root):
        if root is None: 
            return 0
        left = self.helper(root.left)
        right = self.helper(root.right)
        left = left if left > 0 else 0
        right = right if right > 0 else 0
        self.maxsum = max(self.maxsum, left + right + root.val)
        return max(left, right) + root.val
        
class Solution:
    """
    @param root: The root of binary tree.
    @return: An integer
    """
    def maxPathSum(self, root):
        # write your code here
        maxsum, _ = self.maxPathHelper(root)
        return maxsum 
        
    def maxPathHelper(self, root):
        if root is None:
            return -sys.maxsize, 0
        
        left = self.maxPathHelper(root.left)
        right = self.maxPathHelper(root.right)
        maxpath = max(left[0], right[0], root.val + left[1] + right[1])
        single = max(left[1] + root.val, right[1] + root.val, 0)
    
        return maxpath, single 
