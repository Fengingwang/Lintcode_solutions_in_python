# 先设定一个0，然后循环和数组中的每个数去做异或运算，每次得出的结果都继续和下一个数再异或。
# 最后得出来的结果就是单个的那个数了！

# 为什么？因为异或这个运算有三个很重要的特性：
# 两个相同的数异或后为0；
# 0和一个数异或后为那个数；
# 异或运算满足交换律

# 我们用0去依次和数组中的数进行异或，结果再继续和下一个数异或，一遍下来，每个数字都异或到了，
# 交换律一遍，就是让每两个相同的数字都自己跟自己异或，结果都是0，
# 然后0和那个单独的数字异或，结果就是那个单独的数字！

# XOR 
# 1. 相同等于零, 不同等于一
# 2. 不进位加法

# XOR 
# a ^ b = c then a ^ c = b, b ^ c = a 
# a ^ a = 0
# a ^ 0 = a 
# a ^ b ^ c = a ^ (b ^ c)


class Solution:
    """
    @param A: An integer array
    @return: An integer
    """
    def singleNumber(self, A):
        # write your code here
        if A is None or len(A) == 0:
            return 
        res = 0
        for num in A:
            res = res ^ num 
        
        return res

从数学的角度考虑，用两倍所有非重复元素和减去原数组即可，而且在python中，去除list中重复的元素转为set就可实现。
def singleNumber(self, nums):
    """
    :type nums: List[int]
    :rtype: int
    """
    return 2 * sum(set(nums)) - sum(nums)
