# 这道题是之前那道Palindrome Permutation的拓展，
# 那道题只是让判断存不存在回文全排列，而这题让我们返回所有的回文全排列，
# 此题给了我们充分的提示：如果回文全排列存在，我们只需要生成前半段字符串即可，后面的直接根据前半段得到。
# 那么我们再进一步思考，由于回文字符串有奇偶两种情况，
# 偶数回文串例如abba，可以平均分成前后半段，
# 而奇数回文串例如abcba，需要分成前中后三段，需要注意的是中间部分只能是一个字符，
# 那么我们可以分析得出，如果一个字符串的回文字符串要存在，那么奇数个的字符只能有0个或1个，其余的必须是偶数个，
# 所以我们可以用哈希表来记录所有字符的出现个数，然后我们找出出现奇数次数的字符加入odd中，
# 如果有两个或两个以上的奇数个数的字符，那么返回空集，
# 我们对于每个字符，不管其奇偶，都将其个数除以2的个数的字符加入t中，
# 这样做的原因是如果是偶数个，那么将其一般加入t中，
# 如果是奇数，如果有1个，那么除以2是0，不会有字符加入t，如果是3个，那么除以2是1，取一个加入t。
# 等我们获得了t之后，t是就是前半段字符，我们对其做全排列，
# 每得到一个全排列，我们加上mid和该全排列的逆序列就是一种所求的回文字符串，
# 这样我们就可以得到所有的回文全排列了。

class Solution:
    """
    @param s: the given string
    @return: all the palindromic permutations (without duplicates) of it
    """
    def generatePalindromes(self, s):
        # write your code here
        if not s or len(s) == 0: return []
        if len(s) == 1: return [s]
        
        dict = {}
        for c in s:
            dict[c] = dict.get(c, 0) + 1
            
        oddcount = 0
        odd, even = '', ''
        
        for key, val in dict.items():
            if val % 2 == 1:
                odd = key 
                oddcount += 1
            even += key * (val // 2)
        
        if oddcount > 1: return []
        
        even = list(even)
        tempres = []
        visited = [False] * len(even)
        even.sort()
        self.dfs(even, visited, [], tempres)
        
        result = []
        for i, val in enumerate(tempres):
            evenhalfstr = ''.join(val)
            comtemp = evenhalfstr + odd + evenhalfstr[::-1]
            result.append(comtemp)
        
        return result
    
        
    def dfs(self, nums, visited, temp, res):
        if len(nums) == len(temp):
            res.append(temp + [])
            return 
        for i in range(len(nums)):
            if visited[i]:
                continue
            if i > 0 and visited[i - 1] == False and nums[i] == nums[i - 1]:
                continue
            temp.append(nums[i])
            visited[i] = True 
            self.dfs(nums, visited, temp, res)
            visited[i] = False 
            temp.pop()
        
            
    
                
