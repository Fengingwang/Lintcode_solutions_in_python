class Solution:
    """
    @param: A: An integer array
    @param: B: An integer array
    @return: a double whose format is *.5 or *.0
    """
    def findMedianSortedArrays(self, A, B):
        # write your code here
        # generally, find the Kth element of 2 sorted arrays
        n = len(A) + len(B)
        if n % 2 == 1:
            return self.findKth(A, B, n // 2 + 1)
        else:
            smaller = self.findKth(A, B, n // 2)
            bigger = self.findKth(A, B, n // 2 + 1)
            return (smaller + bigger) / 2.0
    
    def findKth(self, A, B, k):
        # special cases
        if len(A) == 0:
            return B[k - 1]
        if len(B) == 0:
            return A[k - 1]
        if k == 1:
            return min(A[0], B[0])
        
        valA = A[k // 2 - 1] if len(A) >= k // 2 else None 
        valB = B[k // 2 - 1] if len(B) >= k // 2 else None 
        
        if valA is None:
            return self.findKth(A, B[k // 2:], k - k // 2)
        if valB is None:
            return self.findKth(A[k // 2:], B, k - k // 2)
        if (valA is not None) and (valB is not None):
            if valA < valB:
                return self.findKth(A[k // 2:], B, k - k // 2)
            else:
                return self.findKth(A, B[k // 2:], k - k // 2)
            


class Solution:
    def findMedianSortedArrays(self, A, B):
        n = len(A) + len(B)
        if n % 2 == 1:
            return self.findKth(A, B, n // 2 + 1)
        else:
            smaller = self.findKth(A, B, n // 2)
            bigger = self.findKth(A, B, n // 2 + 1)
            return (smaller + bigger) / 2

    def findKth(self, A, B, k):
        if len(A) == 0:
            return B[k - 1]
        if len(B) == 0:
            return A[k - 1]
        if k == 1:
            return min(A[0], B[0])
        
        a = A[k // 2 - 1] if len(A) >= k // 2 else None
        b = B[k // 2 - 1] if len(B) >= k // 2 else None
        
        if b is None or (a is not None and a < b):
            return self.findKth(A[k // 2:], B, k - k // 2)
        return self.findKth(A, B[k // 2:], k - k // 2)
        
