design a function to add ranger 
first, deal with lower_bar to nums[0]
second, deal with nums[0] to nums[i]
third, deal with nums[i] to upper_bar 

class Solution:
    """
    @param: nums: a sorted integer array
    @param: lower: An integer
    @param: upper: An integer
    @return: a list of its missing ranges
    """
    def findMissingRanges(self, nums, lower, upper):
        # write your code here
        res = []
        n = len(nums)
        
        if n == 0:
            self.addranger(res, lower, upper)
            return res 
        
        self.addranger(res, lower, nums[0] - 1)
        for i in range(1, n):
            self.addranger(res, nums[i - 1] + 1, nums[i] - 1)
        self.addranger(res, nums[n - 1] + 1, upper)
        
        return res 
        
        
    def addranger(self, res, start, end):
        if start > end:
            return 
        elif start == end:
            res.append(str(start))
        else:
            res.append(str(start) + '->' + str(end))
