import random
class RandomizedSet(object):
    def __init__(self):
        self.nums, self.pos = [], {}
        
    def insert(self, val):
        if val in self.pos:  return False
        self.nums.append(val)
        self.pos[val] = len(self.nums) - 1
        return True

    def remove(self, val):
        if val not in self.pos: return False 
        idx, last = self.pos[val], self.nums[-1]
        self.nums[idx], self.pos[last] = last, idx
        self.nums.pop(); self.pos.pop(val, 0)
        return True
            
    def getRandom(self):
        return self.nums[random.randint(0, len(self.nums) - 1)]

# 这道题让我们在常数时间范围内实现插入删除和获得随机数操作，如果这道题没有常数时间的限制，直接用一个set就可以搞定所有的操作。
# 但是由于时间的限制，我们无法在常数时间内实现获取随机数，所以只能另辟蹊径。
# 此题的正确解法是利用到了一个一维数组和一个哈希表，
# 其中数组用来保存数字，哈希表用来建立每个数字和其在数组中的位置之间的映射，
# 对于插入操作，我们先看这个数字是否已经在哈希表中存在，如果存在的话直接返回false，
#               不存在的话，我们将其插入到数组的末尾，然后建立数字和其位置的映射。
# 删除操作是比较tricky的，我们还是要先判断其是否在哈希表里，如果没有，直接返回false。
#                         由于哈希表的删除是常数时间的，而数组并不是，为了使数组删除也能常数级，
#                         我们实际上将要删除的数字和数组的最后一个数字调换个位置，然后修改对应的哈希表中的值，
#                         这样我们只需要删除数组的最后一个元素即可，保证了常数时间内的删除。
# 而返回随机数对于数组来说就很简单了，我们只要随机生成一个位置，返回该位置上的数字即可
