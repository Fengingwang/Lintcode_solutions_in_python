class Solution:
    """
    @param n: a positive integer
    @return: the nth digit of the infinite integer sequence
    """
    def findNthDigit(self, n):
        # write your code here
        start, size, step = 1, 1, 9
        while n > size * step:
            n = n - size * step
            size = size + 1
            step = step * 10
            start = start * 10
        return int(str(start + (n - 1) // size)[(n - 1) % size])
        
        
# 解题思路：
# 思路一：分三步走，
# 第一步确定是在哪几位数之间
# 第二步确定是哪个数
# 第三步确定是这个数的哪一位数
# 举个例子，
# 比如n=23456，在9+90*2+900*3和9+90*2+900*3+9000*4之间，所以说明，这个数在1000-9999之间，是一个四位数。
# 一位数时，9*1=9个 
# 二位数时，90*2=180个， 
# 三位数时，900*3=2700个， 
# 。。。。
# 以此类推，

# step代表每位数的个数，9,90,900。。。
# start代表每位数开始的那个数，1,10,100。。。
# size代表几位数，1,2,3。。。
# 这样，循环时，判断n与base*digit的大小，进入n、size, step, start的调整。

# 23456-9-90*2-900*3=20567，
# 也就是，从1000开始，数20567位，那到底是落在哪个数字上呢？
# 1000+(20567-1)/4=6141，
# 所以说，在6141的某一位上，就是第n=23456位数，那到底是哪一位呢
# (20567-1)%4=2，
# 这说明，在6141的第3位上，也就是4。
# 注意的是，这里最后计算是哪个数、哪一位时，要减去1，这是因为整除代表某个数的最后一位，所以需要减1。
