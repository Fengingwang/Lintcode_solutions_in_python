class Solution:
    def maxProfit(self, prices):
        # write your code here
        if len(prices) < 2: return 0
        
        n = len(prices)
        left, right = [0] * n, [0] * n
        
        # scan from left to right 
        minp, pf = sys.maxsize, 0
        for i in range(n):
            pf = max(pf, prices[i] - minp)
            minp = min(minp, prices[i])
            left[i] = pf
        
        # scan from right to left
        maxp, pf = -sys.maxsize, 0
        for i in range(n - 1, -1, -1):
            pf = max(pf, maxp - prices[i])
            maxp = max(maxp, prices[i])
            right[i] = pf
        
        res = 0
        for i in range(n ):
            res = max(left[i] + right[i], res)
        
        return res 
        
# 解题思路：
# 只允许做两次交易，解法很巧妙，有点动态规划的意思：
# 开辟两个数组f1和f2，
# f1[i]表示在price[i]之前进行一次交易所获得的最大利润，
# f2[i]表示在price[i]之后进行一次交易所获得的最大利润。
# 则f1[i]+f2[i]的最大值就是所要求的最大值，
# 而f1[i]和f2[i]的计算就需要动态规划了，看代码不难理解。
class Solution:
    """
    @param prices: Given an integer array
    @return: Maximum profit
    """
    def maxProfit(self, prices):
        # write your code here
        if len(prices) <= 1:
            return 0
        
        n = len(prices)
        
        left = [0 for i in range(n)]
        right = [0 for i in range(n)]
        
        minp = prices[0]
        for i in range(1, n):
            minp = min(minp, prices[i])
            left[i] = max(left[i - 1], prices[i] - minp)
            
        maxp = prices[n - 1]
        for i in range(n - 2, 0 - 1, -1):
            maxp = max(maxp, prices[i])
            right[i] = max(right[i + 1], maxp - prices[i])
        
        profit = 0
        for i in range(n):
            profit = max(profit, left[i] + right[i])
        
        return profit
        
