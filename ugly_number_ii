class Solution:
    """
    @param n: An integer
    @return: the nth prime number as description.
    """
    def nthUglyNumber(self, n):
        # write your code here
        if n < 0: return 0
        
        f = [1] * n 
        id2, id3, id5 = 0, 0, 0
        for i in range(1, n):
            f[i] = min(2 * f[id2], 3 * f[id3], 5 * f[id5])
            if f[i] == 2 * f[id2]: id2 += 1
            if f[i] == 3 * f[id3]: id3 += 1
            if f[i] == 5 * f[id5]: id5 += 1
        return f[n - 1]
            
# 所有的ugly number都是由1开始，乘以2/3/5生成的。
# 只要将这些生成的数排序即可获得，自动排序可以使用set
# 这样每次取出的第一个元素就是最小元素，由此再继续生成新的ugly number.
# 可以分成如下三组：
# (1) 1×2, 2×2, 3×2, 4×2, 5×2, …
# (2) 1×3, 2×3, 3×3, 4×3, 5×3, …
# (3) 1×5, 2×5, 3×5, 4×5, 5×5, …
# 使每个组已经用过的数字删除掉，这样列表中只有一个元素，
# 获取三个组的最小值之后就计算下一个丑数。
