class FenWickTree: 
    def __init__(self, n):
        self.sums = [0] * (n + 1)
    
    # update with the dif = new_value - original_value 
    def update(self, i, delta):
        while i < len(self.sums):
            self.sums[i] += delta
            i += i & -i
    
    # return sum of nums[0:i]        
    def query(self, i):
        res = 0
        while i > 0: 
            res += self.sums[i]
            i -= i & -i
        return res 
            
class NumArray(object):
    def __init__(self, nums):
        self.nums = nums
        self.fwt = FenWickTree(len(nums))
        for i in range(len(nums)):
            self.fwt.update(i + 1, nums[i])
     
    def update(self, i, val):
        self.fwt.update(i + 1, val - self.nums[i])
        self.nums[i] = val

    def sumRange(self, i, j):
        return self.fwt.query(j + 1) - self.fwt.query(i)
