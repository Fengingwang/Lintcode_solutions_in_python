class Solution:
    def isBalanced(self, root):
        # write your code here
        return self.helper(root)
    def helper(self, root):
        if not root: return True 
        return abs(self.maxheight(root.left) - self.maxheight(root.right)) <= 1 \
        and self.helper(root.left) and self.helper(root.right)
    def maxheight(self, root): 
        if not root: return 0
        left = self.maxheight(root.left)
        right = self.maxheight(root.right)
        return max(left, right) + 1
        
class Solution:
    """
    @param root: The root of binary tree.
    @return: True if this Binary tree is Balanced, or false.
    """
    def isBalanced(self, root):
        # write your code here
        balanced, _ = self.validate(root)
        return balanced
        
    def validate(self, root):
        if root is None:
            return True, 0
            
        balanced, leftheight = self.validate(root.left)
        if not balanced:
            return False, 0
        balanced, rightheight = self.validate(root.right)
        if not balanced:
            return False, 0
            
        return abs(leftheight - rightheight) <= 1, max(leftheight, rightheight) + 1
