# 这个题的思路是，因为 两个subarray 一定不重叠, 
# 所以必定存在一条分割线, 分开这两个subarrays
# 所以 最后的部分里：
#   max = Integer.MIN_VALUE;
#         for(int i = 0; i < size - 1; i++){
#             max = Math.max(max, left[i] + right[i + 1]);
#         }
#         return max;
# 这里是在枚举 这条分割线的位置
# 然后 left[]和right[]里分别存的是，
# 某个位置往左的 maximum subarray 和往右的 maximum subarray

class Solution:
    """
    @param: nums: A list of integers
    @return: An integer denotes the sum of max two non-overlapping subarrays
    """
    def maxTwoSubArrays(self, nums):
        # write your code here
        if len(nums) == 0:
            return 0
        
        n = len(nums)
        left = [0 for i in range(n)]
        right = [0 for i in range(n)]
        
        sumi, minp, maxsub = 0, 0, -sys.maxsize
        for i in range(0, n):
            sumi += nums[i]
            maxsub = max(maxsub, sumi - minp)
            minp = min(minp, sumi)
            left[i] = maxsub
        
        sumi, minp, maxsub = 0, 0, -sys.maxsize
        for i in range(n - 1, 0 - 1, -1):
            sumi += nums[i]
            maxsub = max(maxsub, sumi - minp)
            minp = min(minp, sumi)
            right[i] = maxsub
            
        res = -sys.maxsize
        for i in range(0, n - 1):
            res = max(res, left[i] + right[i + 1])
        
        return res
