import heapq 
class Solution(object):
    def kthSmallest(self, matrix, k):
        
        m, n = len(matrix), len(matrix[0])
        visited = [[False] * n for _ in range(m)]
        q = [(matrix[0][0], 0, 0)]
        ans = None
        visited[0][0] = True
        
        for _ in range(k):
            ans, i, j = heapq.heappop(q)
            if i + 1 < m and not visited[i + 1][j]:
                visited[i + 1][j] = True
                heapq.heappush(q, (matrix[i + 1][j], i + 1, j))
            if j + 1 < n and not visited[i][j + 1]:
                visited[i][j + 1] = True
                heapq.heappush(q, (matrix[i][j + 1], i, j + 1))
        return ans 
        
# 注意是要寻找排好序的第k小元素，而不是第k个不重复元素。       
# 不用把每个元素都进堆，只需要把“最可能是最小值”的进堆即可。
# 首先将矩阵的左上角（下标0,0）元素加入堆
# 然后执行k次循环：
# 弹出堆顶元素top，记其下标为i, j
# 将其下方元素matrix[i + 1][j]，与右方元素matrix[i][j + 1]加入堆（若它们没有加入过堆）
# 实际上visited数组可以省去，在队列扩展时，
# 当且仅当j == 0时才向下扩展，否则只做横向扩展。
