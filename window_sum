# 思路
# 先看例子，如果我们要返回一个sums的数组，那么这个数组应该是这样的
# sums[0] 1 + 2 + 7               = nums[0] + nums[1] + nums[2]   （加k次，也就是第一个window）
# sums[1] 1 + 2 + 7 - 1 + 8       = sums[0] - nums[0] + nums[0 + 3] （第二个window）
# sums[2] 2 + 7 + 8 - 2 + 5       = sums[1] - nums[1] + nums[1 + 3] （第三个window）

class Solution:
    """
    @param nums: a list of integers.
    @param k: length of window.
    @return: the sum of the element inside the window at each moving.
    """
    def winSum(self, nums, k):
        # write your code here
        if nums is None or len(nums) < k or k <= 0:
            return []
        
        n = len(nums)
        sumi = [0] * (n - k + 1)
        
        for i in range(0, k, 1):
            sumi[0] += nums[i]
        
        for i in range(1, n - k + 1, 1):
            sumi[i] = sumi[i - 1] - nums[i - 1] + nums[i + k - 1]
        
        return sumi
        
class Solution:
    def winSum(self, nums, k):
        # write your code here
        if nums is None or len(nums) < k:
            return None
        if len(nums) == 0 & k == 0:
            return nums
            
        start, end = 0,k-1
        result = []
        sum = 0
        
        for i in range(0,k):
            sum += nums[i]
        result.append(sum)
        
        while end + 1 < len(nums):
            sum = sum - nums[start] + nums[end+1]
            result.append(sum)
            start += 1
            end += 1
            
        return result
