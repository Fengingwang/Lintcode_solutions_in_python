class Solution:
    """
    @param: :  A list of integers
    @return: A list of unique permutations
    """

    def permuteUnique(self, nums):
        # write your code here
        nums.sort()
        
        n = len(nums)
        used = [False] * n
        res = []
        
        self.dfs_permutation(nums, 0, n, used, [], res)
        
        return res
        
    def dfs_permutation(self, nums, d, n, used, curt, res):
        if d == n:
            res.append(curt[:])
        for i in range(len(nums)):
            if used[i]: 
                continue 
            if i > 0 and nums[i] == nums[i - 1] and used[i - 1] == False:
                continue 
            curt.append(nums[i])
            used[i] = True 
            self.dfs_permutation(nums, d + 1, n, used, curt, res)
            used[i] = False 
            curt.pop()
            
class Solution:
    """
    @param: :  A list of integers
    @return: A list of unique permutations
    """
    def permuteUnique(self, nums):
        # write your code here
        if nums is None:
            return []
        result = []
        visited = [False] * len(nums)
        nums. sort()
        self.dfs(nums, visited, [], result)
        return result 
        
    def dfs(self, nums, visited, permutation, res):
        if len(permutation) == len(nums):
            res.append([] + permutation)
        for i in range(0, len(nums)):
            if visited[i]:
                continue
            if (i > 0 and nums[i] == nums[i - 1] and visited[i - 1] == False):
                continue 
            permutation.append(nums[i])
            visited[i] = True
            self.dfs(nums, visited, permutation, res)
            visited[i] = False 
            permutation.pop()
