# 解题思路
# 这道题使用动态规划来解决。
# 题的意思是：S的所有子串中，有多少子串是T。
# 定义f[i][j]为 S[0:i] 中子序列为 T[0:j] 的个数，接下来寻找状态转移关系
# 状态转移应从 f[i-1][j], f[i-1][j-1], f[i][j-1] 中寻找
# 接着寻找突破口——S[i] 和 T[j] 的关系
# S[i] == T[j]: 两个字符串的最后一个字符相等，我们可以选择 S[i] 和 T[j] 配对，那么此时有 f[i][j] = f[i-1][j-1]; 
                若不使 S[i] 和 T[j] 配对，而是选择 S[0:i-1] 中的某个字符和 T[j] 配对，那么 f[i][j] = f[i-1][j]. 
                综合以上两种选择，可得知在S[i] == T[j]时有 f[i][j] = f[i-1][j-1] + f[i-1][j]
# S[i] != T[j]: 最后一个字符不等时，S[i] 不可能和 T[j] 配对，故 f[i][j] = f[i-1][j]
# 初始化状态：dp[i][0]=1；S[0...i-1]只有一个子串是空串。


class Solution:
    """
    @param: : A string
    @param: : A string
    @return: Count the number of distinct subsequences
    """
    def numDistinct(self, S, T):
        # write your code here
        
        #intial 
        lens = len(S)
        lent = len(T)
        f = [[0 for _ in range(lent + 1)] for _ in range(lens + 1)]
        for i in range(lens + 1):
            f[i][0] = 1
        
        # status and transfer
        for i in range(1, lens + 1):
            for j in range(1, min(i + 1, lent + 1)):
                if S[i - 1] == T[j - 1]:
                    f[i][j] = f[i - 1][j] + f[i - 1][j - 1]
                else:
                    f[i][j] = f[i - 1][j] 
        
        # return 
        return f[lens][lent]
