class Solution:
    lookup = {'0':'0', '1':'1', '6':'9', '8':'8', '9':'6'}
    def findStrobogrammatic(self, n):
        return self.findStrobogrammaticRecu(n, n)
 
    def findStrobogrammaticRecu(self, n, k):
        if k == 0:
            return ['']
        elif k == 1:
            return ['0', '1', '8']
        temp_list = self.findStrobogrammaticRecu(n, k - 2) # recursion k - 2 times 
        res = []
        for num in temp_list:
            for key, val in self.lookup.iteritems():
                if n != k: # can add 00 to outer 
                    res.append(key + num + val)
                elif key != '0': # cannot add 00 to outer
                    res.append(key + num + val)
        return res
        
# 这道题是之前那道Strobogrammatic Number的拓展，
# 那道题让我们判断一个数是否是对称数，而这道题让我们找出长度为n的所有的对称数，
# 题目中给了提示说可以用递归来做，而且提示了递归调用n-2，而不是n-1。
# 我们先来列举一下n为0,1,2,3,4的情况：

# n = 0:   none
# n = 1:   0, 1, 8
# n = 2:   11, 69, 88, 96
# n = 3:   101, 609, 808, 906, 111, 619, 818, 916, 181, 689, 888, 986
# n = 4:   1001, 6009, 8008, 9006, 1111, 6119, 8118, 9116, 1691, 6699, 8698, 9696, 1881, 6889, 8888, 9886, 1961, 6969, 8968, 9966

# 观察n=0和n=2，
# 可以发现后者是在前者的基础上，每个数字的左右增加了[1 1], [6 9], [8 8], [9 6]，
# 看n=1和n=3更加明显，
# 在0的左右增加[1 1]，变成了101, 在0的左右增加[6 9]，变成了609, 
# 在0的左右增加[8 8]，变成了808, 在0的左右增加[9 6]，变成了906, 
# 然后在分别在1和8的左右两边加那四组数，
# 我们实际上是从m=0层开始，一层一层往上加的，
# 需要注意的是当加到了n层的时候，左右两边不能加[0 0]，
# 因为0不能出现在两位数及多位数的开头，
# 在中间递归的过程中，需要有在数字左右两边各加上0的那种情况

# eg if we delete 'if n != k: res.append(key + num + val)' we got results short of 1001 ect
# Input 4
# Output
# ["1111","1691","1881","1961","6119","6699","6889","6969",
# "8118","8698","8888","8968","9116","9696","9886","9966"]
# Expected
# ["1001","1111","1691","1881","1961","6009","6119","6699","6889","6969",
# "8008","8118","8698","8888","8968","9006","9116","9696","9886","9966"]

        
