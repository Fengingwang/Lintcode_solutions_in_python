递推公式：
dp[i][j]表示s[0:i-1]是否能和p[0:j-1]匹配。
由于只有p中会含有regular expression，所以以p[j-1]来进行分类。
case 1:
p[j-1] != '.' && p[j-1] != '*'：
dp[i][j] = dp[i-1][j-1] && (s[i-1] == p[j-1])
case 2:
p[j-1] == '.'： dp[i][j] = dp[i-1][j-1]
case 3:
而关键的难点在于 p[j-1] = '*'。由于星号可以匹配0，1，乃至多个p[j-2]。
1. 匹配0个元素，即消去p[j-2]，此时p[0: j-1] = p[0: j-3]
dp[i][j] = dp[i][j-2]
2. 匹配1个元素，此时p[0: j-1] = p[0: j-2]
dp[i][j] = dp[i][j-1]
3. 匹配多个元素，此时p[0: j-1] = { p[0: j-2], p[j-2], ... , p[j-2] }
dp[i][j] = dp[i-1][j] && (p[j-2]=='.' || s[i-2]==p[j-2])

外卡匹配和正则匹配最大的区别就是在星号的使用规则上，
对于正则匹配来说，星号不能单独存在，前面必须要有一个字符，而星号存在的意义就是表明前面这个字符的个数可以是任意个，包括0个，
那么就是说即使前面这个字符并没有在s中出现过也无所谓，只要后面的能匹配上就可以了。
而外卡匹配就不是这样的，外卡匹配中的星号跟前面的字符没有半毛钱关系，
如果前面的字符没有匹配上，那么直接返回false了，根本不用管星号。

class Solution:
    """
    @param s: A string 
    @param p: A string includes "." and "*"
    @return: A boolean
    """
    def isMatch(self, s, p):
        # write your code here
        m = len(s)
        n = len(p)
        
        f = [[False for _ in range(n + 1)] for _ in range(m + 1)]
        f[0][0] = True
        
        for j in range(1, n + 1):
            if p[j - 1] == '*':
                f[0][j] = f[0][j - 2]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '.' or p[j - 1] == s[i - 1]:
                    f[i][j] = f[i - 1][j - 1]
                elif p[j - 1] == '*':
                    f[i][j] = f[i][j - 2] or (f[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))
        
        return f[-1][-1]
