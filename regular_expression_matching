case1:
- if p.charAt(j) == s.charAt(i) : 
dp[i][j] = dp[i-1][j-1]
case2:
- if p.charAt(j) == '.' : 
dp[i][j] = dp[i-1][j-1]
case 3:
- if p.charAt(j) == '*':
- - if p.charAt(j-1) != s.charAt(i) : 
    dp[i][j] = dp[i][j-2] //in this case, a* only counts as empty
- - if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.':
dp[i][j] = dp[i-1][j] //in this case, a* counts as multiple a
dp[i][j] = dp[i][j-1] // in this case, a* counts as single a
dp[i][j] = dp[i][j-2] // in this case, a* counts as empty

外卡匹配和正则匹配最大的区别就是在星号的使用规则上，
对于正则匹配来说，星号不能单独存在，前面必须要有一个字符，而星号存在的意义就是表明前面这个字符的个数可以是任意个，包括0个，
那么就是说即使前面这个字符并没有在s中出现过也无所谓，只要后面的能匹配上就可以了。
而外卡匹配就不是这样的，外卡匹配中的星号跟前面的字符没有半毛钱关系，
如果前面的字符没有匹配上，那么直接返回false了，根本不用管星号。

class Solution:
    """
    @param s: A string 
    @param p: A string includes "." and "*"
    @return: A boolean
    """
    def isMatch(self, s, p):
        # write your code here
        m = len(s)
        n = len(p)
        
        f = [[False for _ in range(n + 1)] for _ in range(m + 1)]
        f[0][0] = True
        
        for j in range(1, n + 1):
            if p[j - 1] == '*':
                f[0][j] = f[0][j - 2]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '.' or p[j - 1] == s[i - 1]:
                    f[i][j] = f[i - 1][j - 1]
                elif p[j - 1] == '*':
                    f[i][j] = f[i][j - 2] or (f[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))
        
        return f[-1][-1]
