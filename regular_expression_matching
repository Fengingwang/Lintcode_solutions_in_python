# 先来看递归的解法：
# 如果P[j+1]!='*':
# S[i] == P[j] => 匹配下一位(i+1, j+1)
# S[i]!=P[j] => 匹配失败
# 如果P[j+1]=='*':
# S[i]==P[j] => 匹配下一位(i+1, j+2)或者(i, j+2)
# S[i]!=P[j] => 匹配下一位(i,j+2)
# 匹配成功的条件为S[i]=='\0' && P[j]=='\0'。


class Solution:
    """
    @param s: A string 
    @param p: A string includes "." and "*"
    @return: A boolean
    """
    def isMatch(self, s, p):
        # write your code here
        m = len(s)
        n = len(p)
        
        # intialization
        f = [[False for x in range(n + 1)] for y in range(m + 1)]
        f[0][0] = True
        
        # status and transfer
        for i in range(1, n + 1):
            if p[i - 1] == '*':
                f[0][i] = f[0][i - 2]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] != '*':
                    f[i][j] = f[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')
                else:
                    f[i][j] = f[i][j - 2] or (f[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))
                    
        # return            
        return f[m][n]
        
class Solution:
    """
    @param s: A string 
    @param p: A string includes "." and "*"
    @return: A boolean
    """
    def isMatch(self, s, p):
        # write your code here
        m = len(s)
        n = len(p)
        
        # intialization
        f = [[False for x in range(n + 1)] for y in range(m + 1)]
        f[0][0] = True
        
        # status and transfer
        for i in range(1, n + 1):
            if p[i - 1] == '*':
                f[0][i] = f[0][i - 2]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '*':
                    f[i][j] = f[i][j - 2]
                    if s[i - 1] == p[j - 2] or p[j - 2] == '.':
                        f[i][j] |= f[i - 1][j]  # OR operation between the current variable and the other one
                else:
                    if s[i - 1] == p[j - 1] or p[j - 1] == '.':
                        f[i][j] = f[i - 1][j - 1]
        # return            
        return f[m][n]
