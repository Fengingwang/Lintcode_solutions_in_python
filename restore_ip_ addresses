IP地址由32位二进制数组成，为便于使用，常以XXX.XXX.XXX.XXX形式表现，每组XXX代表小于或等于255的10进制数。
所以说IP地址总共有四段，每一段可能有一位，两位或者三位，范围是[0, 255]，
当某段是三位时，我们要判断其是否越界（>255)
当只有一位时，0可以成某一段，如果有两位或三位时，像 00， 01， 001， 011， 000等都是不合法的，所以我们还是需要有一个判定函数来判断某个字符串是否合法。
这道题其实也可以看做是字符串的分段问题，在输入字符串中加入三个点，将字符串分为四段，每一段必须合法，求所有可能的情况。

class Solution:
    """
    @param s: the IP string
    @return: All possible valid IP addresses
    """
    def restoreIpAddresses(self, s):
        # write your code here
        res = []
        self.dfs(s, 0, res, '')
        return res 
        
    def dfs(self, s, sub, ips, ip):
        if sub == 4 and s == "":
            ips.append(ip[1:])
        for i in range(1, 4):
            if i <= len(s) and int(s[:i]) <= 255:
                self.dfs(s[i:], sub + 1, ips, ip + '.' + s[:i])
                if s[0] == '0':
                    break 
                    
class Solution:
    """
    @param s: the IP string
    @return: All possible valid IP addresses
    """
    def restoreIpAddresses(self, s):
        # write your code here
        res = []
        self.dfs(s, 0, res, "")
        return res
        
    def dfs(self, s, sub, ips, ip):
        if sub == 4 and s == "":
            ips.append(ip[1:])        
        for i in range(1, 4):
            if i <= len(s):
                if int(s[:i]) <= 255:
                    self.dfs(s[i:], sub + 1, ips, ip + '.' + s[:i])
                    if s[0] == "0":
                        break 
        
class Solution:
    """
    @param s: the IP string
    @return: All possible valid IP addresses
    """
    def restoreIpAddresses(self, s):
        # write your code here
        def dfs(s, sub, ips, ip):
            if sub == 4:                    # should be 4 parts 
                if s == '':
                    ips.append(ip[1:])      # remove first '.'
                return 
            for i in range(1, 4):           # the three if s order cannot be changed 
                if i <= len(s):             # if i > len(s), s[:i] will make false
                    if int(s[:i]) <= 255:
                        dfs(s[i:], sub + 1, ips, ip + '.' + s[:i])
                        if s[0] == '0':
                            break           # make sure that res just can be "0.0.0.0" and remove like "00"
        ips = []
        dfs(s, 0, ips, '')
        return ips
