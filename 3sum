# use 2 loops, fix one number then the other two can be changed to a 2sum problem

class Solution:
    """
    @param numbers: Give an array numbers of n integer
    @return: Find all unique triplets in the array which gives the sum of zero.
    """
    def threeSum(self, nums):
        # write your code here
        nums.sort()
        res = []
        
        for k in range(0, len(nums) - 2):
            if k and nums[k] == nums[k - 1]:
                continue 
            target = -nums[k]
            
            i, j = k + 1, len(nums) - 1
            while i < j:
                if nums[i] + nums[j] == target:
                    res.append([nums[k], nums[i], nums[j]])
                    j -= 1
                    i += 1
                    while i < j and nums[i] == nums[i - 1]:
                        i += 1
                    while i < j and nums[j] == nums[j + 1]:
                        j -= 1
                elif nums[i] + nums[j] > target:
                    j -= 1
                else:
                    i += 1
        
        return res
