# 这道题给了我们两个字符串，让我们删除一些字符使得两个字符串相等，我们希望删除的字符的ASCII码最小。
# dp[i][j] is the cost for making s1.substr(0,i) and s2.substr(0, j) empty. 
# Note s1[i], s2[j] not included in the substring.
# Base case: dp[0][0] = 0
# target: dp[m][n]
# if s1[i-1] = s2[j-1]   // no deletion
# dp[i][j] = dp[i-1][j-1];
# else   // delete either s1[i-1] or s2[j-1]
# dp[i][j] = min(dp[i-1][j]+s1[i-1], dp[i][j-1]+s2[j-1]);

class Solution:
    """
    @param s1: a string
    @param s2: a string
    @return: the lowest ASCII sum of deleted characters to make two strings equal
    """
    def minimumDeleteSum(self, s1, s2):
        # Write your code here
        m, n = len(s1), len(s2)
        
        f = [[0 for _ in range(n + 1)] for _ in range(m + 1)]
        
        f[0][0] = 0
        for i in range(1, m + 1):
            f[i][0] = f[i - 1][0] + ord(s1[i - 1])
        for j in range(1, n + 1):
            f[0][j] = f[0][j - 1] + ord(s2[j - 1])
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if s1[i - 1] == s2[j - 1]:
                    f[i][j] = f[i - 1][j - 1]
                else:
                    f[i][j] = min(f[i - 1][j] + ord(s1[i - 1]), f[i][j - 1] + ord(s2[j - 1]))
        
        return f[-1][-1]
