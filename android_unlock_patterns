class Solution:
    """
    @param m: an integer
    @param n: an integer
    @return: the total number of unlock patterns of the Android lock screen
    """
    def numberOfPatterns(self, m, n):
        # Write your code here
        res = 0
        jumps = [[0 for _ in range(10)] for _ in range(10)]
        jumps[1][3] = jumps[3][1] = 2
        jumps[4][6] = jumps[6][4] = 5
        jumps[7][9] = jumps[9][7] = 8
        jumps[1][7] = jumps[7][1] = 4
        jumps[2][8] = jumps[8][2] = 5
        jumps[3][9] = jumps[9][3] = 6
        jumps[1][9] = jumps[9][1] = jumps[3][7] = jumps[7][3] = 5
        
        visited = [False] * 10
        for i in range(m, n + 1):
            res += self.dfs(1, i - 1, jumps, visited) * 4
            res += self.dfs(2, i - 1, jumps, visited) * 4
            res += self.dfs(5, i - 1, jumps, visited) 
            
        return res 
            
    def dfs(self, curt, remain, jumps, visited):
        if remain < 0: return 0
        if remain == 0: return 1
        visited[curt] = True 
        rst = 0
        for i in range(1, 10):
            if visited[i] == False and (jumps[curt][i] == 0 or visited[jumps[curt][i]] == True):
                rst += self.dfs(i, remain - 1, jumps, visited)
        visited[curt] = False 
        return rst

# 这道题说的是安卓机子的解锁方法，有9个数字键，如果密码的长度范围在[m, n]之间，问所有的解锁模式共有多少种，
# 注意题目中给出的一些非法的滑动模式。
# 首先1不能直接到3，必须经过2，同理的有4到6，7到9，1到7，2到8，3到9，还有就是对角线必须经过5，例如1到9，3到7等。
# 我们建立一个二维数组jumps，用来记录两个数字键之间是否有中间键，
# 然后再用一个一位数组visited来记录某个键是否被访问过，然后我们用递归来解，
# 我们先对1调用递归函数，在递归函数中，我们遍历1到9每个数字next，然后找他们之间是否有jump数字，
# 如果next没被访问过，并且jump为0，
# 或者jump被访问过，
# 我们对next调用递归函数。
# 数字1的模式个数算出来后，由于1,3,7,9是对称的，所以我们乘4即可，
# 然后再对数字2调用递归函数，2,4,6,9也是对称的，再乘4，
# 最后单独对5调用一次，然后把所有的加起来就是最终结果了，




