# 竖直遍历二叉树，并把每一列存入一个二维数组
# 我们隐约的可以感觉到好像是一种层序遍历的前后顺序，那么我们如何来确定列的顺序呢?
# 我们可以把根节点给个序号0，然后开始层序遍历，凡是左子节点则序号减1，右子节点序号加1，
# 这样我们可以通过序号来把相同列的节点值放到一起
# 层序遍历需要用到queue，此时queue里不能只存节点，而是要存序号和节点组成的pair，
# 这样我们每次取出就可以操作序号，而且排入队中的节点也赋上其正确的序号
 
class Solution:
    def verticalOrder(self, root):
        # write your code here
        if not root: return []
        
        queue = []
        queue.append((root, 0))
        d = collections.defaultdict(list)
        
        while queue: 
            curt, order = queue.pop(0) # it is pop(0) not pop()
            d[order].append(curt.val)
            if curt.left: queue.append((curt.left, order - 1))
            if curt.right: queue.append((curt.right, order + 1))
        
        res = []
        for i in range(min(d.keys()), max(d.keys()) + 1):
            res.append(d[i])
        
        return res
