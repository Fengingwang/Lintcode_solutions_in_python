import heapq
class Solution:
    """
    @param n: An integer
    @param nums: An array
    @return: the Kth largest element
    """
    def kthLargestElement(self, n, nums):
        # write your code here
        nums = [-num for num in nums]
        heapq.heapify(nums)
        for _ in range(n):
            res = heapq.heappop(nums)
        return -res 

# Max Heap Time: O(n + klog(n)) | Space: O(n)        
# 首先解释下为什么要nums = [-num for num in nums]. 
# 因为Python的Standard Library里面调用heapify的时候，永远是一个min_heap，
# 然后因为没有Max Heap的implementation，你要做的就是通过Min Heap来模拟Max Heap的运算，
# 最简单的就是将所有的数变成-num

# Min Heap Time: O(k) + O(n * logk) | Space: O(K)
# import heapq
# class Solution(object):
#     def findKthLargest(self, nums, k):
#         min_heap = [-float('inf')] * k
#         heapq.heapify(min_heap)
#         for num in nums:
#             if num > min_heap[0]:
#                 heapq.heappop(min_heap)
#                 heapq.heappush(min_heap, num)
#         return min_heap[0]
        
# 假设我们初始化一个Size为K的Heap，每个大小都是无穷小，会是这样
#   -infinite
#     /           input: [3,2,1,5,6,4]
# -infinite      
# 我们每次插入一个元素进我们的heap，只要这个元素比heap里面最小的值大，我们就把最小值pop出来，然后插入元素。
# 因为你每次pop最小元素，然后push过程中，heap都会重新把内部的数据进行整合，
# 然后当pop和push执行完后，heap的顶端永远是最小的值，所以用上面的例子全部走完以后，我们看看最终的heap长啥样
#      5
#     /           
#   6      
# 最大的数6，在第二层，第二大(第k大)的数5，正好就是我们要找大kth largest element
