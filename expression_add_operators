class Solution:
    """
    @param num: a string contains only digits 0-9
    @param target: An integer
    @return: return all possibilities
    """
    def addOperators(self, num, target):
        # write your code here
        res = []
        self.dfs(num, 0, target, 0, 0, '', res)
        return res 
        
    def dfs(self, num, start, target, sum_now, last, path, res):
        if start == len(num) and sum_now == target:
            res.append(path)
            
        for end in range(start + 1, len(num) + 1):
            subpath = num[start : end]
            if len(subpath) > 1 and subpath[0] == '0':
                break 
            curt = int(subpath)
            if start == 0:
                self.dfs(num, end, target, sum_now + curt, curt, path + subpath, res)
            else:
                self.dfs(num, end, target, sum_now + curt, curt, path + '+' + subpath, res)
                self.dfs(num, end, target, sum_now - curt, -curt, path + '-' + subpath, res)
                self.dfs(num, end, target, sum_now - last + curt * last, curt * last, path + '*' + subpath, res)
